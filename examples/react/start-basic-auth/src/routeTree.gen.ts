/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LogoutRouteImport } from './routes/logout'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthedPostsRouteRouteImport } from './routes/_authed/posts.route'
import { Route as AuthedPostsIndexRouteImport } from './routes/_authed/posts.index'
import { Route as AuthedPostsPostIdRouteImport } from './routes/_authed/posts.$postId'

// Create/Update Routes

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedPostsRouteRoute = AuthedPostsRouteRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedPostsIndexRoute = AuthedPostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedPostsRouteRoute,
} as any)

const AuthedPostsPostIdRoute = AuthedPostsPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => AuthedPostsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutRouteImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRoute
    }
    '/_authed/posts': {
      id: '/_authed/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof AuthedPostsRouteRouteImport
      parentRoute: typeof AuthedRouteImport
    }
    '/_authed/posts/$postId': {
      id: '/_authed/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof AuthedPostsPostIdRouteImport
      parentRoute: typeof AuthedPostsRouteRouteImport
    }
    '/_authed/posts/': {
      id: '/_authed/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof AuthedPostsIndexRouteImport
      parentRoute: typeof AuthedPostsRouteRouteImport
    }
  }
}

// Add type-safety to the createFileRoute function across the route tree

declare module './routes/index' {
  const createFileRoute: CreateFileRoute<
    '/',
    FileRoutesByPath['/']['parentRoute'],
    FileRoutesByPath['/']['id'],
    FileRoutesByPath['/']['path'],
    FileRoutesByPath['/']['fullPath']
  >
}
declare module './routes/_authed' {
  const createFileRoute: CreateFileRoute<
    '/_authed',
    FileRoutesByPath['/_authed']['parentRoute'],
    FileRoutesByPath['/_authed']['id'],
    FileRoutesByPath['/_authed']['path'],
    FileRoutesByPath['/_authed']['fullPath']
  >
}
declare module './routes/login' {
  const createFileRoute: CreateFileRoute<
    '/login',
    FileRoutesByPath['/login']['parentRoute'],
    FileRoutesByPath['/login']['id'],
    FileRoutesByPath['/login']['path'],
    FileRoutesByPath['/login']['fullPath']
  >
}
declare module './routes/logout' {
  const createFileRoute: CreateFileRoute<
    '/logout',
    FileRoutesByPath['/logout']['parentRoute'],
    FileRoutesByPath['/logout']['id'],
    FileRoutesByPath['/logout']['path'],
    FileRoutesByPath['/logout']['fullPath']
  >
}
declare module './routes/signup' {
  const createFileRoute: CreateFileRoute<
    '/signup',
    FileRoutesByPath['/signup']['parentRoute'],
    FileRoutesByPath['/signup']['id'],
    FileRoutesByPath['/signup']['path'],
    FileRoutesByPath['/signup']['fullPath']
  >
}
declare module './routes/_authed/posts.route' {
  const createFileRoute: CreateFileRoute<
    '/_authed/posts',
    FileRoutesByPath['/_authed/posts']['parentRoute'],
    FileRoutesByPath['/_authed/posts']['id'],
    FileRoutesByPath['/_authed/posts']['path'],
    FileRoutesByPath['/_authed/posts']['fullPath']
  >
}
declare module './routes/_authed/posts.$postId' {
  const createFileRoute: CreateFileRoute<
    '/_authed/posts/$postId',
    FileRoutesByPath['/_authed/posts/$postId']['parentRoute'],
    FileRoutesByPath['/_authed/posts/$postId']['id'],
    FileRoutesByPath['/_authed/posts/$postId']['path'],
    FileRoutesByPath['/_authed/posts/$postId']['fullPath']
  >
}
declare module './routes/_authed/posts.index' {
  const createFileRoute: CreateFileRoute<
    '/_authed/posts/',
    FileRoutesByPath['/_authed/posts/']['parentRoute'],
    FileRoutesByPath['/_authed/posts/']['id'],
    FileRoutesByPath['/_authed/posts/']['path'],
    FileRoutesByPath['/_authed/posts/']['fullPath']
  >
}

// Create and export the route tree

interface AuthedPostsRouteRouteChildren {
  AuthedPostsPostIdRoute: typeof AuthedPostsPostIdRoute
  AuthedPostsIndexRoute: typeof AuthedPostsIndexRoute
}

const AuthedPostsRouteRouteChildren: AuthedPostsRouteRouteChildren = {
  AuthedPostsPostIdRoute: AuthedPostsPostIdRoute,
  AuthedPostsIndexRoute: AuthedPostsIndexRoute,
}

const AuthedPostsRouteRouteWithChildren =
  AuthedPostsRouteRoute._addFileChildren(AuthedPostsRouteRouteChildren)

interface AuthedRouteChildren {
  AuthedPostsRouteRoute: typeof AuthedPostsRouteRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedPostsRouteRoute: AuthedPostsRouteRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/posts': typeof AuthedPostsRouteRouteWithChildren
  '/posts/$postId': typeof AuthedPostsPostIdRoute
  '/posts/': typeof AuthedPostsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/posts/$postId': typeof AuthedPostsPostIdRoute
  '/posts': typeof AuthedPostsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/_authed/posts': typeof AuthedPostsRouteRouteWithChildren
  '/_authed/posts/$postId': typeof AuthedPostsPostIdRoute
  '/_authed/posts/': typeof AuthedPostsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/posts'
    | '/posts/$postId'
    | '/posts/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/logout' | '/signup' | '/posts/$postId' | '/posts'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/login'
    | '/logout'
    | '/signup'
    | '/_authed/posts'
    | '/_authed/posts/$postId'
    | '/_authed/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/login",
        "/logout",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/posts"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_authed/posts": {
      "filePath": "_authed/posts.route.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/posts/$postId",
        "/_authed/posts/"
      ]
    },
    "/_authed/posts/$postId": {
      "filePath": "_authed/posts.$postId.tsx",
      "parent": "/_authed/posts"
    },
    "/_authed/posts/": {
      "filePath": "_authed/posts.index.tsx",
      "parent": "/_authed/posts"
    }
  }
}
ROUTE_MANIFEST_END */
