/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as RelativeRouteImport } from './routes/relative'
import { Route as LinkPropsRouteImport } from './routes/linkProps'
import { Route as AbsoluteRouteImport } from './routes/absolute'
import { Route as SearchRouteRouteImport } from './routes/search/route'
import { Route as ParamsRouteRouteImport } from './routes/params/route'
import { Route as IndexRouteImport } from './routes/index'
import {
  Route as SearchSearchPlaceholderRouteImport,
  ServerRoute as SearchSearchPlaceholderServerRouteImport,
} from './routes/search/searchPlaceholder'
import { Route as ParamsParamsPlaceholderRouteImport } from './routes/params/$paramsPlaceholder'

const rootServerRouteImport = createServerRootRoute()

const RelativeRoute = RelativeRouteImport.update({
  id: '/relative',
  path: '/relative',
  getParentRoute: () => rootRouteImport,
} as any)
const LinkPropsRoute = LinkPropsRouteImport.update({
  id: '/linkProps',
  path: '/linkProps',
  getParentRoute: () => rootRouteImport,
} as any)
const AbsoluteRoute = AbsoluteRouteImport.update({
  id: '/absolute',
  path: '/absolute',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRouteRoute = SearchRouteRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const ParamsRouteRoute = ParamsRouteRouteImport.update({
  id: '/params',
  path: '/params',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchSearchPlaceholderRoute = SearchSearchPlaceholderRouteImport.update({
  id: '/searchPlaceholder',
  path: '/searchPlaceholder',
  getParentRoute: () => SearchRouteRoute,
} as any)
const ParamsParamsPlaceholderRoute = ParamsParamsPlaceholderRouteImport.update({
  id: '/$paramsPlaceholder',
  path: '/$paramsPlaceholder',
  getParentRoute: () => ParamsRouteRoute,
} as any)
const SearchSearchPlaceholderServerRoute =
  SearchSearchPlaceholderServerRouteImport.update({
    id: '/searchPlaceholder',
    path: '/searchPlaceholder',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/params': typeof ParamsRouteRouteWithChildren
  '/search': typeof SearchRouteRouteWithChildren
  '/absolute': typeof AbsoluteRoute
  '/linkProps': typeof LinkPropsRoute
  '/relative': typeof RelativeRoute
  '/params/$paramsPlaceholder': typeof ParamsParamsPlaceholderRoute
  '/search/searchPlaceholder': typeof SearchSearchPlaceholderRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/params': typeof ParamsRouteRouteWithChildren
  '/search': typeof SearchRouteRouteWithChildren
  '/absolute': typeof AbsoluteRoute
  '/linkProps': typeof LinkPropsRoute
  '/relative': typeof RelativeRoute
  '/params/$paramsPlaceholder': typeof ParamsParamsPlaceholderRoute
  '/search/searchPlaceholder': typeof SearchSearchPlaceholderRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/params': typeof ParamsRouteRouteWithChildren
  '/search': typeof SearchRouteRouteWithChildren
  '/absolute': typeof AbsoluteRoute
  '/linkProps': typeof LinkPropsRoute
  '/relative': typeof RelativeRoute
  '/params/$paramsPlaceholder': typeof ParamsParamsPlaceholderRoute
  '/search/searchPlaceholder': typeof SearchSearchPlaceholderRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/params'
    | '/search'
    | '/absolute'
    | '/linkProps'
    | '/relative'
    | '/params/$paramsPlaceholder'
    | '/search/searchPlaceholder'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/params'
    | '/search'
    | '/absolute'
    | '/linkProps'
    | '/relative'
    | '/params/$paramsPlaceholder'
    | '/search/searchPlaceholder'
  id:
    | '__root__'
    | '/'
    | '/params'
    | '/search'
    | '/absolute'
    | '/linkProps'
    | '/relative'
    | '/params/$paramsPlaceholder'
    | '/search/searchPlaceholder'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ParamsRouteRoute: typeof ParamsRouteRouteWithChildren
  SearchRouteRoute: typeof SearchRouteRouteWithChildren
  AbsoluteRoute: typeof AbsoluteRoute
  LinkPropsRoute: typeof LinkPropsRoute
  RelativeRoute: typeof RelativeRoute
}
export interface FileServerRoutesByFullPath {
  '/search/searchPlaceholder': typeof SearchSearchPlaceholderServerRoute
}
export interface FileServerRoutesByTo {
  '/search/searchPlaceholder': typeof SearchSearchPlaceholderServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/search/searchPlaceholder': typeof SearchSearchPlaceholderServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/search/searchPlaceholder'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/search/searchPlaceholder'
  id: '__root__' | '/search/searchPlaceholder'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/params': {
      id: '/params'
      path: '/params'
      fullPath: '/params'
      preLoaderRoute: typeof ParamsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/absolute': {
      id: '/absolute'
      path: '/absolute'
      fullPath: '/absolute'
      preLoaderRoute: typeof AbsoluteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/linkProps': {
      id: '/linkProps'
      path: '/linkProps'
      fullPath: '/linkProps'
      preLoaderRoute: typeof LinkPropsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/relative': {
      id: '/relative'
      path: '/relative'
      fullPath: '/relative'
      preLoaderRoute: typeof RelativeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/params/$paramsPlaceholder': {
      id: '/params/$paramsPlaceholder'
      path: '/$paramsPlaceholder'
      fullPath: '/params/$paramsPlaceholder'
      preLoaderRoute: typeof ParamsParamsPlaceholderRouteImport
      parentRoute: typeof ParamsRouteRoute
    }
    '/search/searchPlaceholder': {
      id: '/search/searchPlaceholder'
      path: '/searchPlaceholder'
      fullPath: '/search/searchPlaceholder'
      preLoaderRoute: typeof SearchSearchPlaceholderRouteImport
      parentRoute: typeof SearchRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: unknown
      parentRoute: typeof rootServerRouteImport
    }
    '/params': {
      id: '/params'
      path: '/params'
      fullPath: '/params'
      preLoaderRoute: unknown
      parentRoute: typeof rootServerRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: unknown
      parentRoute: typeof rootServerRouteImport
    }
    '/absolute': {
      id: '/absolute'
      path: '/absolute'
      fullPath: '/absolute'
      preLoaderRoute: unknown
      parentRoute: typeof rootServerRouteImport
    }
    '/linkProps': {
      id: '/linkProps'
      path: '/linkProps'
      fullPath: '/linkProps'
      preLoaderRoute: unknown
      parentRoute: typeof rootServerRouteImport
    }
    '/relative': {
      id: '/relative'
      path: '/relative'
      fullPath: '/relative'
      preLoaderRoute: unknown
      parentRoute: typeof rootServerRouteImport
    }
    '/params/$paramsPlaceholder': {
      id: '/params/$paramsPlaceholder'
      path: '/$paramsPlaceholder'
      fullPath: '/params/$paramsPlaceholder'
      preLoaderRoute: unknown
      parentRoute: typeof rootServerRouteImport
    }
    '/search/searchPlaceholder': {
      id: '/search/searchPlaceholder'
      path: '/searchPlaceholder'
      fullPath: '/search/searchPlaceholder'
      preLoaderRoute: typeof SearchSearchPlaceholderServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface ParamsRouteRouteChildren {
  ParamsParamsPlaceholderRoute: typeof ParamsParamsPlaceholderRoute
}

const ParamsRouteRouteChildren: ParamsRouteRouteChildren = {
  ParamsParamsPlaceholderRoute: ParamsParamsPlaceholderRoute,
}

const ParamsRouteRouteWithChildren = ParamsRouteRoute._addFileChildren(
  ParamsRouteRouteChildren,
)

interface SearchRouteRouteChildren {
  SearchSearchPlaceholderRoute: typeof SearchSearchPlaceholderRoute
}

const SearchRouteRouteChildren: SearchRouteRouteChildren = {
  SearchSearchPlaceholderRoute: SearchSearchPlaceholderRoute,
}

const SearchRouteRouteWithChildren = SearchRouteRoute._addFileChildren(
  SearchRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ParamsRouteRoute: ParamsRouteRouteWithChildren,
  SearchRouteRoute: SearchRouteRouteWithChildren,
  AbsoluteRoute: AbsoluteRoute,
  LinkPropsRoute: LinkPropsRoute,
  RelativeRoute: RelativeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
