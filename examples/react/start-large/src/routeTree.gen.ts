/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RelativeRouteImport } from './routes/relative'
import { Route as LinkPropsRouteImport } from './routes/linkProps'
import { Route as AbsoluteRouteImport } from './routes/absolute'
import { Route as SearchRouteRouteImport } from './routes/search/route'
import { Route as ParamsRouteRouteImport } from './routes/params/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SearchSearchPlaceholderRouteImport } from './routes/search/searchPlaceholder'
import { Route as ParamsParamsPlaceholderRouteImport } from './routes/params/$paramsPlaceholder'

// Create/Update Routes

const RelativeRoute = RelativeRouteImport.update({
  id: '/relative',
  path: '/relative',
  getParentRoute: () => rootRoute,
} as any)

const LinkPropsRoute = LinkPropsRouteImport.update({
  id: '/linkProps',
  path: '/linkProps',
  getParentRoute: () => rootRoute,
} as any)

const AbsoluteRoute = AbsoluteRouteImport.update({
  id: '/absolute',
  path: '/absolute',
  getParentRoute: () => rootRoute,
} as any)

const SearchRouteRoute = SearchRouteRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const ParamsRouteRoute = ParamsRouteRouteImport.update({
  id: '/params',
  path: '/params',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SearchSearchPlaceholderRoute = SearchSearchPlaceholderRouteImport.update({
  id: '/searchPlaceholder',
  path: '/searchPlaceholder',
  getParentRoute: () => SearchRouteRoute,
} as any)

const ParamsParamsPlaceholderRoute = ParamsParamsPlaceholderRouteImport.update({
  id: '/$paramsPlaceholder',
  path: '/$paramsPlaceholder',
  getParentRoute: () => ParamsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/params': {
      id: '/params'
      path: '/params'
      fullPath: '/params'
      preLoaderRoute: typeof ParamsRouteRouteImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteRouteImport
      parentRoute: typeof rootRoute
    }
    '/absolute': {
      id: '/absolute'
      path: '/absolute'
      fullPath: '/absolute'
      preLoaderRoute: typeof AbsoluteRouteImport
      parentRoute: typeof rootRoute
    }
    '/linkProps': {
      id: '/linkProps'
      path: '/linkProps'
      fullPath: '/linkProps'
      preLoaderRoute: typeof LinkPropsRouteImport
      parentRoute: typeof rootRoute
    }
    '/relative': {
      id: '/relative'
      path: '/relative'
      fullPath: '/relative'
      preLoaderRoute: typeof RelativeRouteImport
      parentRoute: typeof rootRoute
    }
    '/params/$paramsPlaceholder': {
      id: '/params/$paramsPlaceholder'
      path: '/$paramsPlaceholder'
      fullPath: '/params/$paramsPlaceholder'
      preLoaderRoute: typeof ParamsParamsPlaceholderRouteImport
      parentRoute: typeof ParamsRouteRouteImport
    }
    '/search/searchPlaceholder': {
      id: '/search/searchPlaceholder'
      path: '/searchPlaceholder'
      fullPath: '/search/searchPlaceholder'
      preLoaderRoute: typeof SearchSearchPlaceholderRouteImport
      parentRoute: typeof SearchRouteRouteImport
    }
  }
}

// Add type-safety to the createFileRoute function across the route tree

declare module './routes/index' {
  const createFileRoute: CreateFileRoute<
    '/',
    FileRoutesByPath['/']['parentRoute'],
    FileRoutesByPath['/']['id'],
    FileRoutesByPath['/']['path'],
    FileRoutesByPath['/']['fullPath']
  >
}
declare module './routes/params/route' {
  const createFileRoute: CreateFileRoute<
    '/params',
    FileRoutesByPath['/params']['parentRoute'],
    FileRoutesByPath['/params']['id'],
    FileRoutesByPath['/params']['path'],
    FileRoutesByPath['/params']['fullPath']
  >
}
declare module './routes/search/route' {
  const createFileRoute: CreateFileRoute<
    '/search',
    FileRoutesByPath['/search']['parentRoute'],
    FileRoutesByPath['/search']['id'],
    FileRoutesByPath['/search']['path'],
    FileRoutesByPath['/search']['fullPath']
  >
}
declare module './routes/absolute' {
  const createFileRoute: CreateFileRoute<
    '/absolute',
    FileRoutesByPath['/absolute']['parentRoute'],
    FileRoutesByPath['/absolute']['id'],
    FileRoutesByPath['/absolute']['path'],
    FileRoutesByPath['/absolute']['fullPath']
  >
}
declare module './routes/linkProps' {
  const createFileRoute: CreateFileRoute<
    '/linkProps',
    FileRoutesByPath['/linkProps']['parentRoute'],
    FileRoutesByPath['/linkProps']['id'],
    FileRoutesByPath['/linkProps']['path'],
    FileRoutesByPath['/linkProps']['fullPath']
  >
}
declare module './routes/relative' {
  const createFileRoute: CreateFileRoute<
    '/relative',
    FileRoutesByPath['/relative']['parentRoute'],
    FileRoutesByPath['/relative']['id'],
    FileRoutesByPath['/relative']['path'],
    FileRoutesByPath['/relative']['fullPath']
  >
}
declare module './routes/params/$paramsPlaceholder' {
  const createFileRoute: CreateFileRoute<
    '/params/$paramsPlaceholder',
    FileRoutesByPath['/params/$paramsPlaceholder']['parentRoute'],
    FileRoutesByPath['/params/$paramsPlaceholder']['id'],
    FileRoutesByPath['/params/$paramsPlaceholder']['path'],
    FileRoutesByPath['/params/$paramsPlaceholder']['fullPath']
  >
}
declare module './routes/search/searchPlaceholder' {
  const createFileRoute: CreateFileRoute<
    '/search/searchPlaceholder',
    FileRoutesByPath['/search/searchPlaceholder']['parentRoute'],
    FileRoutesByPath['/search/searchPlaceholder']['id'],
    FileRoutesByPath['/search/searchPlaceholder']['path'],
    FileRoutesByPath['/search/searchPlaceholder']['fullPath']
  >
}

// Create and export the route tree

interface ParamsRouteRouteChildren {
  ParamsParamsPlaceholderRoute: typeof ParamsParamsPlaceholderRoute
}

const ParamsRouteRouteChildren: ParamsRouteRouteChildren = {
  ParamsParamsPlaceholderRoute: ParamsParamsPlaceholderRoute,
}

const ParamsRouteRouteWithChildren = ParamsRouteRoute._addFileChildren(
  ParamsRouteRouteChildren,
)

interface SearchRouteRouteChildren {
  SearchSearchPlaceholderRoute: typeof SearchSearchPlaceholderRoute
}

const SearchRouteRouteChildren: SearchRouteRouteChildren = {
  SearchSearchPlaceholderRoute: SearchSearchPlaceholderRoute,
}

const SearchRouteRouteWithChildren = SearchRouteRoute._addFileChildren(
  SearchRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/params': typeof ParamsRouteRouteWithChildren
  '/search': typeof SearchRouteRouteWithChildren
  '/absolute': typeof AbsoluteRoute
  '/linkProps': typeof LinkPropsRoute
  '/relative': typeof RelativeRoute
  '/params/$paramsPlaceholder': typeof ParamsParamsPlaceholderRoute
  '/search/searchPlaceholder': typeof SearchSearchPlaceholderRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/params': typeof ParamsRouteRouteWithChildren
  '/search': typeof SearchRouteRouteWithChildren
  '/absolute': typeof AbsoluteRoute
  '/linkProps': typeof LinkPropsRoute
  '/relative': typeof RelativeRoute
  '/params/$paramsPlaceholder': typeof ParamsParamsPlaceholderRoute
  '/search/searchPlaceholder': typeof SearchSearchPlaceholderRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/params': typeof ParamsRouteRouteWithChildren
  '/search': typeof SearchRouteRouteWithChildren
  '/absolute': typeof AbsoluteRoute
  '/linkProps': typeof LinkPropsRoute
  '/relative': typeof RelativeRoute
  '/params/$paramsPlaceholder': typeof ParamsParamsPlaceholderRoute
  '/search/searchPlaceholder': typeof SearchSearchPlaceholderRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/params'
    | '/search'
    | '/absolute'
    | '/linkProps'
    | '/relative'
    | '/params/$paramsPlaceholder'
    | '/search/searchPlaceholder'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/params'
    | '/search'
    | '/absolute'
    | '/linkProps'
    | '/relative'
    | '/params/$paramsPlaceholder'
    | '/search/searchPlaceholder'
  id:
    | '__root__'
    | '/'
    | '/params'
    | '/search'
    | '/absolute'
    | '/linkProps'
    | '/relative'
    | '/params/$paramsPlaceholder'
    | '/search/searchPlaceholder'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ParamsRouteRoute: typeof ParamsRouteRouteWithChildren
  SearchRouteRoute: typeof SearchRouteRouteWithChildren
  AbsoluteRoute: typeof AbsoluteRoute
  LinkPropsRoute: typeof LinkPropsRoute
  RelativeRoute: typeof RelativeRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ParamsRouteRoute: ParamsRouteRouteWithChildren,
  SearchRouteRoute: SearchRouteRouteWithChildren,
  AbsoluteRoute: AbsoluteRoute,
  LinkPropsRoute: LinkPropsRoute,
  RelativeRoute: RelativeRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/params",
        "/search",
        "/absolute",
        "/linkProps",
        "/relative"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/params": {
      "filePath": "params/route.tsx",
      "children": [
        "/params/$paramsPlaceholder"
      ]
    },
    "/search": {
      "filePath": "search/route.tsx",
      "children": [
        "/search/searchPlaceholder"
      ]
    },
    "/absolute": {
      "filePath": "absolute.tsx"
    },
    "/linkProps": {
      "filePath": "linkProps.tsx"
    },
    "/relative": {
      "filePath": "relative.tsx"
    },
    "/params/$paramsPlaceholder": {
      "filePath": "params/$paramsPlaceholder.tsx",
      "parent": "/params"
    },
    "/search/searchPlaceholder": {
      "filePath": "search/searchPlaceholder.tsx",
      "parent": "/search"
    }
  }
}
ROUTE_MANIFEST_END */
