/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as OneRouteImport } from './routes/one'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as BIndexRouteImport } from './routes/b/index'
import { Route as AIndexRouteImport } from './routes/a/index'
import { Route as UsersIdRouteImport } from './routes/users/$id'
import { Route as PostsChar123SlugChar125RouteImport } from './routes/posts/{-$slug}'
import { Route as OneTwoRouteImport } from './routes/one/two'
import { Route as ImagesThumb_Char123Char125RouteImport } from './routes/images/thumb_{$}'
import { Route as FooBarRouteImport } from './routes/foo/$bar'
import { Route as FilesSplatRouteImport } from './routes/files/$'
import { Route as BeepBoopRouteImport } from './routes/beep/boop'
import { Route as BChar123SlugChar125RouteImport } from './routes/b/{-$slug}'
import { Route as BUserChar123idChar125RouteImport } from './routes/b/user-{$id}'
import { Route as BIdRouteImport } from './routes/b/$id'
import { Route as BSplatRouteImport } from './routes/b/$'
import { Route as ApiUserChar123idChar125RouteImport } from './routes/api/user-{$id}'
import { Route as AChar123SlugChar125RouteImport } from './routes/a/{-$slug}'
import { Route as AUserChar123idChar125RouteImport } from './routes/a/user-{$id}'
import { Route as AIdRouteImport } from './routes/a/$id'
import { Route as ASplatRouteImport } from './routes/a/$'
import { Route as UsersProfileIndexRouteImport } from './routes/users/profile/index'
import { Route as FooBarIndexRouteImport } from './routes/foo/$bar.index'
import { Route as BProfileIndexRouteImport } from './routes/b/profile/index'
import { Route as AProfileIndexRouteImport } from './routes/a/profile/index'
import { Route as UsersProfileSettingsRouteImport } from './routes/users/profile/settings'
import { Route as LogsChar123Char125TxtRouteImport } from './routes/logs/{$}.txt'
import { Route as FooChar123BarChar125QuxRouteImport } from './routes/foo/{-$bar}/qux'
import { Route as FooBarIdRouteImport } from './routes/foo/bar/$id'
import { Route as FooIdBarRouteImport } from './routes/foo/$id/bar'
import { Route as CacheTemp_Char123Char125LogRouteImport } from './routes/cache/temp_{$}.log'
import { Route as BProfileSettingsRouteImport } from './routes/b/profile/settings'
import { Route as AProfileSettingsRouteImport } from './routes/a/profile/settings'
import { Route as IdFooBarRouteImport } from './routes/$id/foo/bar'
import { Route as IdBarFooRouteImport } from './routes/$id/bar/foo'
import { Route as ZYXIndexRouteImport } from './routes/z/y/x/index'
import { Route as ZYXWRouteImport } from './routes/z/y/x/w'
import { Route as ZYXVRouteImport } from './routes/z/y/x/v'
import { Route as ZYXURouteImport } from './routes/z/y/x/u'
import { Route as ABCDEFRouteImport } from './routes/a/b/c/d/e/f'

const OneRoute = OneRouteImport.update({
  id: '/one',
  path: '/one',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BIndexRoute = BIndexRouteImport.update({
  id: '/b/',
  path: '/b/',
  getParentRoute: () => rootRouteImport,
} as any)
const AIndexRoute = AIndexRouteImport.update({
  id: '/a/',
  path: '/a/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIdRoute = UsersIdRouteImport.update({
  id: '/users/$id',
  path: '/users/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsChar123SlugChar125Route = PostsChar123SlugChar125RouteImport.update({
  id: '/posts/{-$slug}',
  path: '/posts/{-$slug}',
  getParentRoute: () => rootRouteImport,
} as any)
const OneTwoRoute = OneTwoRouteImport.update({
  id: '/two',
  path: '/two',
  getParentRoute: () => OneRoute,
} as any)
const ImagesThumb_Char123Char125Route =
  ImagesThumb_Char123Char125RouteImport.update({
    id: '/images/thumb_{$}',
    path: '/images/thumb_{$}',
    getParentRoute: () => rootRouteImport,
  } as any)
const FooBarRoute = FooBarRouteImport.update({
  id: '/foo/$bar',
  path: '/foo/$bar',
  getParentRoute: () => rootRouteImport,
} as any)
const FilesSplatRoute = FilesSplatRouteImport.update({
  id: '/files/$',
  path: '/files/$',
  getParentRoute: () => rootRouteImport,
} as any)
const BeepBoopRoute = BeepBoopRouteImport.update({
  id: '/beep/boop',
  path: '/beep/boop',
  getParentRoute: () => rootRouteImport,
} as any)
const BChar123SlugChar125Route = BChar123SlugChar125RouteImport.update({
  id: '/b/{-$slug}',
  path: '/b/{-$slug}',
  getParentRoute: () => rootRouteImport,
} as any)
const BUserChar123idChar125Route = BUserChar123idChar125RouteImport.update({
  id: '/b/user-{$id}',
  path: '/b/user-{$id}',
  getParentRoute: () => rootRouteImport,
} as any)
const BIdRoute = BIdRouteImport.update({
  id: '/b/$id',
  path: '/b/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const BSplatRoute = BSplatRouteImport.update({
  id: '/b/$',
  path: '/b/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiUserChar123idChar125Route = ApiUserChar123idChar125RouteImport.update({
  id: '/api/user-{$id}',
  path: '/api/user-{$id}',
  getParentRoute: () => rootRouteImport,
} as any)
const AChar123SlugChar125Route = AChar123SlugChar125RouteImport.update({
  id: '/a/{-$slug}',
  path: '/a/{-$slug}',
  getParentRoute: () => rootRouteImport,
} as any)
const AUserChar123idChar125Route = AUserChar123idChar125RouteImport.update({
  id: '/a/user-{$id}',
  path: '/a/user-{$id}',
  getParentRoute: () => rootRouteImport,
} as any)
const AIdRoute = AIdRouteImport.update({
  id: '/a/$id',
  path: '/a/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ASplatRoute = ASplatRouteImport.update({
  id: '/a/$',
  path: '/a/$',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersProfileIndexRoute = UsersProfileIndexRouteImport.update({
  id: '/users/profile/',
  path: '/users/profile/',
  getParentRoute: () => rootRouteImport,
} as any)
const FooBarIndexRoute = FooBarIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => FooBarRoute,
} as any)
const BProfileIndexRoute = BProfileIndexRouteImport.update({
  id: '/b/profile/',
  path: '/b/profile/',
  getParentRoute: () => rootRouteImport,
} as any)
const AProfileIndexRoute = AProfileIndexRouteImport.update({
  id: '/a/profile/',
  path: '/a/profile/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersProfileSettingsRoute = UsersProfileSettingsRouteImport.update({
  id: '/users/profile/settings',
  path: '/users/profile/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const LogsChar123Char125TxtRoute = LogsChar123Char125TxtRouteImport.update({
  id: '/logs/{$}/txt',
  path: '/logs/{$}/txt',
  getParentRoute: () => rootRouteImport,
} as any)
const FooChar123BarChar125QuxRoute = FooChar123BarChar125QuxRouteImport.update({
  id: '/foo/{-$bar}/qux',
  path: '/foo/{-$bar}/qux',
  getParentRoute: () => rootRouteImport,
} as any)
const FooBarIdRoute = FooBarIdRouteImport.update({
  id: '/foo/bar/$id',
  path: '/foo/bar/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const FooIdBarRoute = FooIdBarRouteImport.update({
  id: '/foo/$id/bar',
  path: '/foo/$id/bar',
  getParentRoute: () => rootRouteImport,
} as any)
const CacheTemp_Char123Char125LogRoute =
  CacheTemp_Char123Char125LogRouteImport.update({
    id: '/cache/temp_{$}/log',
    path: '/cache/temp_{$}/log',
    getParentRoute: () => rootRouteImport,
  } as any)
const BProfileSettingsRoute = BProfileSettingsRouteImport.update({
  id: '/b/profile/settings',
  path: '/b/profile/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const AProfileSettingsRoute = AProfileSettingsRouteImport.update({
  id: '/a/profile/settings',
  path: '/a/profile/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const IdFooBarRoute = IdFooBarRouteImport.update({
  id: '/$id/foo/bar',
  path: '/$id/foo/bar',
  getParentRoute: () => rootRouteImport,
} as any)
const IdBarFooRoute = IdBarFooRouteImport.update({
  id: '/$id/bar/foo',
  path: '/$id/bar/foo',
  getParentRoute: () => rootRouteImport,
} as any)
const ZYXIndexRoute = ZYXIndexRouteImport.update({
  id: '/z/y/x/',
  path: '/z/y/x/',
  getParentRoute: () => rootRouteImport,
} as any)
const ZYXWRoute = ZYXWRouteImport.update({
  id: '/z/y/x/w',
  path: '/z/y/x/w',
  getParentRoute: () => rootRouteImport,
} as any)
const ZYXVRoute = ZYXVRouteImport.update({
  id: '/z/y/x/v',
  path: '/z/y/x/v',
  getParentRoute: () => rootRouteImport,
} as any)
const ZYXURoute = ZYXURouteImport.update({
  id: '/z/y/x/u',
  path: '/z/y/x/u',
  getParentRoute: () => rootRouteImport,
} as any)
const ABCDEFRoute = ABCDEFRouteImport.update({
  id: '/a/b/c/d/e/f',
  path: '/a/b/c/d/e/f',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/one': typeof OneRouteWithChildren
  '/a/$': typeof ASplatRoute
  '/a/$id': typeof AIdRoute
  '/a/user-{$id}': typeof AUserChar123idChar125Route
  '/a/{-$slug}': typeof AChar123SlugChar125Route
  '/api/user-{$id}': typeof ApiUserChar123idChar125Route
  '/b/$': typeof BSplatRoute
  '/b/$id': typeof BIdRoute
  '/b/user-{$id}': typeof BUserChar123idChar125Route
  '/b/{-$slug}': typeof BChar123SlugChar125Route
  '/beep/boop': typeof BeepBoopRoute
  '/files/$': typeof FilesSplatRoute
  '/foo/$bar': typeof FooBarRouteWithChildren
  '/images/thumb_{$}': typeof ImagesThumb_Char123Char125Route
  '/one/two': typeof OneTwoRoute
  '/posts/{-$slug}': typeof PostsChar123SlugChar125Route
  '/users/$id': typeof UsersIdRoute
  '/a': typeof AIndexRoute
  '/b': typeof BIndexRoute
  '/$id/bar/foo': typeof IdBarFooRoute
  '/$id/foo/bar': typeof IdFooBarRoute
  '/a/profile/settings': typeof AProfileSettingsRoute
  '/b/profile/settings': typeof BProfileSettingsRoute
  '/cache/temp_{$}/log': typeof CacheTemp_Char123Char125LogRoute
  '/foo/$id/bar': typeof FooIdBarRoute
  '/foo/bar/$id': typeof FooBarIdRoute
  '/foo/{-$bar}/qux': typeof FooChar123BarChar125QuxRoute
  '/logs/{$}/txt': typeof LogsChar123Char125TxtRoute
  '/users/profile/settings': typeof UsersProfileSettingsRoute
  '/a/profile': typeof AProfileIndexRoute
  '/b/profile': typeof BProfileIndexRoute
  '/foo/$bar/': typeof FooBarIndexRoute
  '/users/profile': typeof UsersProfileIndexRoute
  '/z/y/x/u': typeof ZYXURoute
  '/z/y/x/v': typeof ZYXVRoute
  '/z/y/x/w': typeof ZYXWRoute
  '/z/y/x': typeof ZYXIndexRoute
  '/a/b/c/d/e/f': typeof ABCDEFRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/one': typeof OneRouteWithChildren
  '/a/$': typeof ASplatRoute
  '/a/$id': typeof AIdRoute
  '/a/user-{$id}': typeof AUserChar123idChar125Route
  '/a/{-$slug}': typeof AChar123SlugChar125Route
  '/api/user-{$id}': typeof ApiUserChar123idChar125Route
  '/b/$': typeof BSplatRoute
  '/b/$id': typeof BIdRoute
  '/b/user-{$id}': typeof BUserChar123idChar125Route
  '/b/{-$slug}': typeof BChar123SlugChar125Route
  '/beep/boop': typeof BeepBoopRoute
  '/files/$': typeof FilesSplatRoute
  '/images/thumb_{$}': typeof ImagesThumb_Char123Char125Route
  '/one/two': typeof OneTwoRoute
  '/posts/{-$slug}': typeof PostsChar123SlugChar125Route
  '/users/$id': typeof UsersIdRoute
  '/a': typeof AIndexRoute
  '/b': typeof BIndexRoute
  '/$id/bar/foo': typeof IdBarFooRoute
  '/$id/foo/bar': typeof IdFooBarRoute
  '/a/profile/settings': typeof AProfileSettingsRoute
  '/b/profile/settings': typeof BProfileSettingsRoute
  '/cache/temp_{$}/log': typeof CacheTemp_Char123Char125LogRoute
  '/foo/$id/bar': typeof FooIdBarRoute
  '/foo/bar/$id': typeof FooBarIdRoute
  '/foo/{-$bar}/qux': typeof FooChar123BarChar125QuxRoute
  '/logs/{$}/txt': typeof LogsChar123Char125TxtRoute
  '/users/profile/settings': typeof UsersProfileSettingsRoute
  '/a/profile': typeof AProfileIndexRoute
  '/b/profile': typeof BProfileIndexRoute
  '/foo/$bar': typeof FooBarIndexRoute
  '/users/profile': typeof UsersProfileIndexRoute
  '/z/y/x/u': typeof ZYXURoute
  '/z/y/x/v': typeof ZYXVRoute
  '/z/y/x/w': typeof ZYXWRoute
  '/z/y/x': typeof ZYXIndexRoute
  '/a/b/c/d/e/f': typeof ABCDEFRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/one': typeof OneRouteWithChildren
  '/a/$': typeof ASplatRoute
  '/a/$id': typeof AIdRoute
  '/a/user-{$id}': typeof AUserChar123idChar125Route
  '/a/{-$slug}': typeof AChar123SlugChar125Route
  '/api/user-{$id}': typeof ApiUserChar123idChar125Route
  '/b/$': typeof BSplatRoute
  '/b/$id': typeof BIdRoute
  '/b/user-{$id}': typeof BUserChar123idChar125Route
  '/b/{-$slug}': typeof BChar123SlugChar125Route
  '/beep/boop': typeof BeepBoopRoute
  '/files/$': typeof FilesSplatRoute
  '/foo/$bar': typeof FooBarRouteWithChildren
  '/images/thumb_{$}': typeof ImagesThumb_Char123Char125Route
  '/one/two': typeof OneTwoRoute
  '/posts/{-$slug}': typeof PostsChar123SlugChar125Route
  '/users/$id': typeof UsersIdRoute
  '/a/': typeof AIndexRoute
  '/b/': typeof BIndexRoute
  '/$id/bar/foo': typeof IdBarFooRoute
  '/$id/foo/bar': typeof IdFooBarRoute
  '/a/profile/settings': typeof AProfileSettingsRoute
  '/b/profile/settings': typeof BProfileSettingsRoute
  '/cache/temp_{$}/log': typeof CacheTemp_Char123Char125LogRoute
  '/foo/$id/bar': typeof FooIdBarRoute
  '/foo/bar/$id': typeof FooBarIdRoute
  '/foo/{-$bar}/qux': typeof FooChar123BarChar125QuxRoute
  '/logs/{$}/txt': typeof LogsChar123Char125TxtRoute
  '/users/profile/settings': typeof UsersProfileSettingsRoute
  '/a/profile/': typeof AProfileIndexRoute
  '/b/profile/': typeof BProfileIndexRoute
  '/foo/$bar/': typeof FooBarIndexRoute
  '/users/profile/': typeof UsersProfileIndexRoute
  '/z/y/x/u': typeof ZYXURoute
  '/z/y/x/v': typeof ZYXVRoute
  '/z/y/x/w': typeof ZYXWRoute
  '/z/y/x/': typeof ZYXIndexRoute
  '/a/b/c/d/e/f': typeof ABCDEFRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/one'
    | '/a/$'
    | '/a/$id'
    | '/a/user-{$id}'
    | '/a/{-$slug}'
    | '/api/user-{$id}'
    | '/b/$'
    | '/b/$id'
    | '/b/user-{$id}'
    | '/b/{-$slug}'
    | '/beep/boop'
    | '/files/$'
    | '/foo/$bar'
    | '/images/thumb_{$}'
    | '/one/two'
    | '/posts/{-$slug}'
    | '/users/$id'
    | '/a'
    | '/b'
    | '/$id/bar/foo'
    | '/$id/foo/bar'
    | '/a/profile/settings'
    | '/b/profile/settings'
    | '/cache/temp_{$}/log'
    | '/foo/$id/bar'
    | '/foo/bar/$id'
    | '/foo/{-$bar}/qux'
    | '/logs/{$}/txt'
    | '/users/profile/settings'
    | '/a/profile'
    | '/b/profile'
    | '/foo/$bar/'
    | '/users/profile'
    | '/z/y/x/u'
    | '/z/y/x/v'
    | '/z/y/x/w'
    | '/z/y/x'
    | '/a/b/c/d/e/f'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/one'
    | '/a/$'
    | '/a/$id'
    | '/a/user-{$id}'
    | '/a/{-$slug}'
    | '/api/user-{$id}'
    | '/b/$'
    | '/b/$id'
    | '/b/user-{$id}'
    | '/b/{-$slug}'
    | '/beep/boop'
    | '/files/$'
    | '/images/thumb_{$}'
    | '/one/two'
    | '/posts/{-$slug}'
    | '/users/$id'
    | '/a'
    | '/b'
    | '/$id/bar/foo'
    | '/$id/foo/bar'
    | '/a/profile/settings'
    | '/b/profile/settings'
    | '/cache/temp_{$}/log'
    | '/foo/$id/bar'
    | '/foo/bar/$id'
    | '/foo/{-$bar}/qux'
    | '/logs/{$}/txt'
    | '/users/profile/settings'
    | '/a/profile'
    | '/b/profile'
    | '/foo/$bar'
    | '/users/profile'
    | '/z/y/x/u'
    | '/z/y/x/v'
    | '/z/y/x/w'
    | '/z/y/x'
    | '/a/b/c/d/e/f'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/one'
    | '/a/$'
    | '/a/$id'
    | '/a/user-{$id}'
    | '/a/{-$slug}'
    | '/api/user-{$id}'
    | '/b/$'
    | '/b/$id'
    | '/b/user-{$id}'
    | '/b/{-$slug}'
    | '/beep/boop'
    | '/files/$'
    | '/foo/$bar'
    | '/images/thumb_{$}'
    | '/one/two'
    | '/posts/{-$slug}'
    | '/users/$id'
    | '/a/'
    | '/b/'
    | '/$id/bar/foo'
    | '/$id/foo/bar'
    | '/a/profile/settings'
    | '/b/profile/settings'
    | '/cache/temp_{$}/log'
    | '/foo/$id/bar'
    | '/foo/bar/$id'
    | '/foo/{-$bar}/qux'
    | '/logs/{$}/txt'
    | '/users/profile/settings'
    | '/a/profile/'
    | '/b/profile/'
    | '/foo/$bar/'
    | '/users/profile/'
    | '/z/y/x/u'
    | '/z/y/x/v'
    | '/z/y/x/w'
    | '/z/y/x/'
    | '/a/b/c/d/e/f'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  OneRoute: typeof OneRouteWithChildren
  ASplatRoute: typeof ASplatRoute
  AIdRoute: typeof AIdRoute
  AUserChar123idChar125Route: typeof AUserChar123idChar125Route
  AChar123SlugChar125Route: typeof AChar123SlugChar125Route
  ApiUserChar123idChar125Route: typeof ApiUserChar123idChar125Route
  BSplatRoute: typeof BSplatRoute
  BIdRoute: typeof BIdRoute
  BUserChar123idChar125Route: typeof BUserChar123idChar125Route
  BChar123SlugChar125Route: typeof BChar123SlugChar125Route
  BeepBoopRoute: typeof BeepBoopRoute
  FilesSplatRoute: typeof FilesSplatRoute
  FooBarRoute: typeof FooBarRouteWithChildren
  ImagesThumb_Char123Char125Route: typeof ImagesThumb_Char123Char125Route
  PostsChar123SlugChar125Route: typeof PostsChar123SlugChar125Route
  UsersIdRoute: typeof UsersIdRoute
  AIndexRoute: typeof AIndexRoute
  BIndexRoute: typeof BIndexRoute
  IdBarFooRoute: typeof IdBarFooRoute
  IdFooBarRoute: typeof IdFooBarRoute
  AProfileSettingsRoute: typeof AProfileSettingsRoute
  BProfileSettingsRoute: typeof BProfileSettingsRoute
  CacheTemp_Char123Char125LogRoute: typeof CacheTemp_Char123Char125LogRoute
  FooIdBarRoute: typeof FooIdBarRoute
  FooBarIdRoute: typeof FooBarIdRoute
  FooChar123BarChar125QuxRoute: typeof FooChar123BarChar125QuxRoute
  LogsChar123Char125TxtRoute: typeof LogsChar123Char125TxtRoute
  UsersProfileSettingsRoute: typeof UsersProfileSettingsRoute
  AProfileIndexRoute: typeof AProfileIndexRoute
  BProfileIndexRoute: typeof BProfileIndexRoute
  UsersProfileIndexRoute: typeof UsersProfileIndexRoute
  ZYXURoute: typeof ZYXURoute
  ZYXVRoute: typeof ZYXVRoute
  ZYXWRoute: typeof ZYXWRoute
  ZYXIndexRoute: typeof ZYXIndexRoute
  ABCDEFRoute: typeof ABCDEFRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/one': {
      id: '/one'
      path: '/one'
      fullPath: '/one'
      preLoaderRoute: typeof OneRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/b/': {
      id: '/b/'
      path: '/b'
      fullPath: '/b'
      preLoaderRoute: typeof BIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/a/': {
      id: '/a/'
      path: '/a'
      fullPath: '/a'
      preLoaderRoute: typeof AIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$id': {
      id: '/users/$id'
      path: '/users/$id'
      fullPath: '/users/$id'
      preLoaderRoute: typeof UsersIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/{-$slug}': {
      id: '/posts/{-$slug}'
      path: '/posts/{-$slug}'
      fullPath: '/posts/{-$slug}'
      preLoaderRoute: typeof PostsChar123SlugChar125RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/one/two': {
      id: '/one/two'
      path: '/two'
      fullPath: '/one/two'
      preLoaderRoute: typeof OneTwoRouteImport
      parentRoute: typeof OneRoute
    }
    '/images/thumb_{$}': {
      id: '/images/thumb_{$}'
      path: '/images/thumb_{$}'
      fullPath: '/images/thumb_{$}'
      preLoaderRoute: typeof ImagesThumb_Char123Char125RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/foo/$bar': {
      id: '/foo/$bar'
      path: '/foo/$bar'
      fullPath: '/foo/$bar'
      preLoaderRoute: typeof FooBarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/files/$': {
      id: '/files/$'
      path: '/files/$'
      fullPath: '/files/$'
      preLoaderRoute: typeof FilesSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/beep/boop': {
      id: '/beep/boop'
      path: '/beep/boop'
      fullPath: '/beep/boop'
      preLoaderRoute: typeof BeepBoopRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/b/{-$slug}': {
      id: '/b/{-$slug}'
      path: '/b/{-$slug}'
      fullPath: '/b/{-$slug}'
      preLoaderRoute: typeof BChar123SlugChar125RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/b/user-{$id}': {
      id: '/b/user-{$id}'
      path: '/b/user-{$id}'
      fullPath: '/b/user-{$id}'
      preLoaderRoute: typeof BUserChar123idChar125RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/b/$id': {
      id: '/b/$id'
      path: '/b/$id'
      fullPath: '/b/$id'
      preLoaderRoute: typeof BIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/b/$': {
      id: '/b/$'
      path: '/b/$'
      fullPath: '/b/$'
      preLoaderRoute: typeof BSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/user-{$id}': {
      id: '/api/user-{$id}'
      path: '/api/user-{$id}'
      fullPath: '/api/user-{$id}'
      preLoaderRoute: typeof ApiUserChar123idChar125RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/a/{-$slug}': {
      id: '/a/{-$slug}'
      path: '/a/{-$slug}'
      fullPath: '/a/{-$slug}'
      preLoaderRoute: typeof AChar123SlugChar125RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/a/user-{$id}': {
      id: '/a/user-{$id}'
      path: '/a/user-{$id}'
      fullPath: '/a/user-{$id}'
      preLoaderRoute: typeof AUserChar123idChar125RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/a/$id': {
      id: '/a/$id'
      path: '/a/$id'
      fullPath: '/a/$id'
      preLoaderRoute: typeof AIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/a/$': {
      id: '/a/$'
      path: '/a/$'
      fullPath: '/a/$'
      preLoaderRoute: typeof ASplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/profile/': {
      id: '/users/profile/'
      path: '/users/profile'
      fullPath: '/users/profile'
      preLoaderRoute: typeof UsersProfileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/foo/$bar/': {
      id: '/foo/$bar/'
      path: '/'
      fullPath: '/foo/$bar/'
      preLoaderRoute: typeof FooBarIndexRouteImport
      parentRoute: typeof FooBarRoute
    }
    '/b/profile/': {
      id: '/b/profile/'
      path: '/b/profile'
      fullPath: '/b/profile'
      preLoaderRoute: typeof BProfileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/a/profile/': {
      id: '/a/profile/'
      path: '/a/profile'
      fullPath: '/a/profile'
      preLoaderRoute: typeof AProfileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/profile/settings': {
      id: '/users/profile/settings'
      path: '/users/profile/settings'
      fullPath: '/users/profile/settings'
      preLoaderRoute: typeof UsersProfileSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logs/{$}/txt': {
      id: '/logs/{$}/txt'
      path: '/logs/{$}/txt'
      fullPath: '/logs/{$}/txt'
      preLoaderRoute: typeof LogsChar123Char125TxtRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/foo/{-$bar}/qux': {
      id: '/foo/{-$bar}/qux'
      path: '/foo/{-$bar}/qux'
      fullPath: '/foo/{-$bar}/qux'
      preLoaderRoute: typeof FooChar123BarChar125QuxRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/foo/bar/$id': {
      id: '/foo/bar/$id'
      path: '/foo/bar/$id'
      fullPath: '/foo/bar/$id'
      preLoaderRoute: typeof FooBarIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/foo/$id/bar': {
      id: '/foo/$id/bar'
      path: '/foo/$id/bar'
      fullPath: '/foo/$id/bar'
      preLoaderRoute: typeof FooIdBarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cache/temp_{$}/log': {
      id: '/cache/temp_{$}/log'
      path: '/cache/temp_{$}/log'
      fullPath: '/cache/temp_{$}/log'
      preLoaderRoute: typeof CacheTemp_Char123Char125LogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/b/profile/settings': {
      id: '/b/profile/settings'
      path: '/b/profile/settings'
      fullPath: '/b/profile/settings'
      preLoaderRoute: typeof BProfileSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/a/profile/settings': {
      id: '/a/profile/settings'
      path: '/a/profile/settings'
      fullPath: '/a/profile/settings'
      preLoaderRoute: typeof AProfileSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$id/foo/bar': {
      id: '/$id/foo/bar'
      path: '/$id/foo/bar'
      fullPath: '/$id/foo/bar'
      preLoaderRoute: typeof IdFooBarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$id/bar/foo': {
      id: '/$id/bar/foo'
      path: '/$id/bar/foo'
      fullPath: '/$id/bar/foo'
      preLoaderRoute: typeof IdBarFooRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/z/y/x/': {
      id: '/z/y/x/'
      path: '/z/y/x'
      fullPath: '/z/y/x'
      preLoaderRoute: typeof ZYXIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/z/y/x/w': {
      id: '/z/y/x/w'
      path: '/z/y/x/w'
      fullPath: '/z/y/x/w'
      preLoaderRoute: typeof ZYXWRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/z/y/x/v': {
      id: '/z/y/x/v'
      path: '/z/y/x/v'
      fullPath: '/z/y/x/v'
      preLoaderRoute: typeof ZYXVRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/z/y/x/u': {
      id: '/z/y/x/u'
      path: '/z/y/x/u'
      fullPath: '/z/y/x/u'
      preLoaderRoute: typeof ZYXURouteImport
      parentRoute: typeof rootRouteImport
    }
    '/a/b/c/d/e/f': {
      id: '/a/b/c/d/e/f'
      path: '/a/b/c/d/e/f'
      fullPath: '/a/b/c/d/e/f'
      preLoaderRoute: typeof ABCDEFRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface OneRouteChildren {
  OneTwoRoute: typeof OneTwoRoute
}

const OneRouteChildren: OneRouteChildren = {
  OneTwoRoute: OneTwoRoute,
}

const OneRouteWithChildren = OneRoute._addFileChildren(OneRouteChildren)

interface FooBarRouteChildren {
  FooBarIndexRoute: typeof FooBarIndexRoute
}

const FooBarRouteChildren: FooBarRouteChildren = {
  FooBarIndexRoute: FooBarIndexRoute,
}

const FooBarRouteWithChildren =
  FooBarRoute._addFileChildren(FooBarRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  OneRoute: OneRouteWithChildren,
  ASplatRoute: ASplatRoute,
  AIdRoute: AIdRoute,
  AUserChar123idChar125Route: AUserChar123idChar125Route,
  AChar123SlugChar125Route: AChar123SlugChar125Route,
  ApiUserChar123idChar125Route: ApiUserChar123idChar125Route,
  BSplatRoute: BSplatRoute,
  BIdRoute: BIdRoute,
  BUserChar123idChar125Route: BUserChar123idChar125Route,
  BChar123SlugChar125Route: BChar123SlugChar125Route,
  BeepBoopRoute: BeepBoopRoute,
  FilesSplatRoute: FilesSplatRoute,
  FooBarRoute: FooBarRouteWithChildren,
  ImagesThumb_Char123Char125Route: ImagesThumb_Char123Char125Route,
  PostsChar123SlugChar125Route: PostsChar123SlugChar125Route,
  UsersIdRoute: UsersIdRoute,
  AIndexRoute: AIndexRoute,
  BIndexRoute: BIndexRoute,
  IdBarFooRoute: IdBarFooRoute,
  IdFooBarRoute: IdFooBarRoute,
  AProfileSettingsRoute: AProfileSettingsRoute,
  BProfileSettingsRoute: BProfileSettingsRoute,
  CacheTemp_Char123Char125LogRoute: CacheTemp_Char123Char125LogRoute,
  FooIdBarRoute: FooIdBarRoute,
  FooBarIdRoute: FooBarIdRoute,
  FooChar123BarChar125QuxRoute: FooChar123BarChar125QuxRoute,
  LogsChar123Char125TxtRoute: LogsChar123Char125TxtRoute,
  UsersProfileSettingsRoute: UsersProfileSettingsRoute,
  AProfileIndexRoute: AProfileIndexRoute,
  BProfileIndexRoute: BProfileIndexRoute,
  UsersProfileIndexRoute: UsersProfileIndexRoute,
  ZYXURoute: ZYXURoute,
  ZYXVRoute: ZYXVRoute,
  ZYXWRoute: ZYXWRoute,
  ZYXIndexRoute: ZYXIndexRoute,
  ABCDEFRoute: ABCDEFRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
