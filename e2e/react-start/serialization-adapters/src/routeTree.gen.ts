/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SsrStreamRouteImport } from './routes/ssr/stream'
import { Route as SsrNestedRouteImport } from './routes/ssr/nested'
import { Route as SsrDataOnlyRouteImport } from './routes/ssr/data-only'
import { Route as ServerFunctionNestedRouteImport } from './routes/server-function/nested'
import { Route as ServerFunctionCustomErrorRouteImport } from './routes/server-function/custom-error'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SsrStreamRoute = SsrStreamRouteImport.update({
  id: '/ssr/stream',
  path: '/ssr/stream',
  getParentRoute: () => rootRouteImport,
} as any)
const SsrNestedRoute = SsrNestedRouteImport.update({
  id: '/ssr/nested',
  path: '/ssr/nested',
  getParentRoute: () => rootRouteImport,
} as any)
const SsrDataOnlyRoute = SsrDataOnlyRouteImport.update({
  id: '/ssr/data-only',
  path: '/ssr/data-only',
  getParentRoute: () => rootRouteImport,
} as any)
const ServerFunctionNestedRoute = ServerFunctionNestedRouteImport.update({
  id: '/server-function/nested',
  path: '/server-function/nested',
  getParentRoute: () => rootRouteImport,
} as any)
const ServerFunctionCustomErrorRoute =
  ServerFunctionCustomErrorRouteImport.update({
    id: '/server-function/custom-error',
    path: '/server-function/custom-error',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/server-function/custom-error': typeof ServerFunctionCustomErrorRoute
  '/server-function/nested': typeof ServerFunctionNestedRoute
  '/ssr/data-only': typeof SsrDataOnlyRoute
  '/ssr/nested': typeof SsrNestedRoute
  '/ssr/stream': typeof SsrStreamRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/server-function/custom-error': typeof ServerFunctionCustomErrorRoute
  '/server-function/nested': typeof ServerFunctionNestedRoute
  '/ssr/data-only': typeof SsrDataOnlyRoute
  '/ssr/nested': typeof SsrNestedRoute
  '/ssr/stream': typeof SsrStreamRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/server-function/custom-error': typeof ServerFunctionCustomErrorRoute
  '/server-function/nested': typeof ServerFunctionNestedRoute
  '/ssr/data-only': typeof SsrDataOnlyRoute
  '/ssr/nested': typeof SsrNestedRoute
  '/ssr/stream': typeof SsrStreamRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/server-function/custom-error'
    | '/server-function/nested'
    | '/ssr/data-only'
    | '/ssr/nested'
    | '/ssr/stream'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/server-function/custom-error'
    | '/server-function/nested'
    | '/ssr/data-only'
    | '/ssr/nested'
    | '/ssr/stream'
  id:
    | '__root__'
    | '/'
    | '/server-function/custom-error'
    | '/server-function/nested'
    | '/ssr/data-only'
    | '/ssr/nested'
    | '/ssr/stream'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ServerFunctionCustomErrorRoute: typeof ServerFunctionCustomErrorRoute
  ServerFunctionNestedRoute: typeof ServerFunctionNestedRoute
  SsrDataOnlyRoute: typeof SsrDataOnlyRoute
  SsrNestedRoute: typeof SsrNestedRoute
  SsrStreamRoute: typeof SsrStreamRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ssr/stream': {
      id: '/ssr/stream'
      path: '/ssr/stream'
      fullPath: '/ssr/stream'
      preLoaderRoute: typeof SsrStreamRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ssr/nested': {
      id: '/ssr/nested'
      path: '/ssr/nested'
      fullPath: '/ssr/nested'
      preLoaderRoute: typeof SsrNestedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ssr/data-only': {
      id: '/ssr/data-only'
      path: '/ssr/data-only'
      fullPath: '/ssr/data-only'
      preLoaderRoute: typeof SsrDataOnlyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/server-function/nested': {
      id: '/server-function/nested'
      path: '/server-function/nested'
      fullPath: '/server-function/nested'
      preLoaderRoute: typeof ServerFunctionNestedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/server-function/custom-error': {
      id: '/server-function/custom-error'
      path: '/server-function/custom-error'
      fullPath: '/server-function/custom-error'
      preLoaderRoute: typeof ServerFunctionCustomErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ServerFunctionCustomErrorRoute: ServerFunctionCustomErrorRoute,
  ServerFunctionNestedRoute: ServerFunctionNestedRoute,
  SsrDataOnlyRoute: SsrDataOnlyRoute,
  SsrNestedRoute: SsrNestedRoute,
  SsrStreamRoute: SsrStreamRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.tsx'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
