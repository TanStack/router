/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/root'
import { Route as postsPostsRouteImport } from './routes/posts/posts'
import { Route as layoutFirstLayoutRouteImport } from './routes/layout/first-layout'
import { Route as homeRouteImport } from './routes/home'
import { Route as postsPostsDetailRouteImport } from './routes/posts/posts-detail'
import { Route as layoutSecondLayoutRouteImport } from './routes/layout/second-layout'
import { Route as postsPostsHomeRouteImport } from './routes/posts/posts-home'
import { Route as ClassicHelloRouteRouteImport } from './routes/file-based-subtree/hello/route'
import { Route as ClassicHelloIndexRouteImport } from './routes/file-based-subtree/hello/index'
import { Route as ClassicHelloWorldRouteImport } from './routes/file-based-subtree/hello/world'
import { Route as ClassicHelloUniverseRouteImport } from './routes/file-based-subtree/hello/universe'
import { Route as bRouteImport } from './routes/b'
import { Route as aRouteImport } from './routes/a'

const postsPostsRoute = postsPostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRouteImport,
} as any)
const layoutFirstLayoutRoute = layoutFirstLayoutRouteImport.update({
  id: '/_first',
  getParentRoute: () => rootRouteImport,
} as any)
const homeRoute = homeRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const postsPostsDetailRoute = postsPostsDetailRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => postsPostsRoute,
} as any)
const layoutSecondLayoutRoute = layoutSecondLayoutRouteImport.update({
  id: '/_second-layout',
  getParentRoute: () => layoutFirstLayoutRoute,
} as any)
const postsPostsHomeRoute = postsPostsHomeRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => postsPostsRoute,
} as any)
const ClassicHelloRouteRoute = ClassicHelloRouteRouteImport.update({
  id: '/classic/hello',
  path: '/classic/hello',
  getParentRoute: () => rootRouteImport,
} as any)
const ClassicHelloIndexRoute = ClassicHelloIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ClassicHelloRouteRoute,
} as any)
const ClassicHelloWorldRoute = ClassicHelloWorldRouteImport.update({
  id: '/world',
  path: '/world',
  getParentRoute: () => ClassicHelloRouteRoute,
} as any)
const ClassicHelloUniverseRoute = ClassicHelloUniverseRouteImport.update({
  id: '/universe',
  path: '/universe',
  getParentRoute: () => ClassicHelloRouteRoute,
} as any)
const bRoute = bRouteImport.update({
  id: '/route-without-file/layout-b',
  path: '/route-without-file/layout-b',
  getParentRoute: () => layoutSecondLayoutRoute,
} as any)
const aRoute = aRouteImport.update({
  id: '/route-without-file/layout-a',
  path: '/route-without-file/layout-a',
  getParentRoute: () => layoutSecondLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof homeRoute
  '': typeof layoutSecondLayoutRouteWithChildren
  '/posts': typeof postsPostsRouteWithChildren
  '/classic/hello': typeof ClassicHelloRouteRouteWithChildren
  '/posts/': typeof postsPostsHomeRoute
  '/posts/$postId': typeof postsPostsDetailRoute
  '/classic/hello/universe': typeof ClassicHelloUniverseRoute
  '/classic/hello/world': typeof ClassicHelloWorldRoute
  '/classic/hello/': typeof ClassicHelloIndexRoute
  '/route-without-file/layout-a': typeof aRoute
  '/route-without-file/layout-b': typeof bRoute
}
export interface FileRoutesByTo {
  '/': typeof homeRoute
  '': typeof layoutSecondLayoutRouteWithChildren
  '/posts': typeof postsPostsHomeRoute
  '/posts/$postId': typeof postsPostsDetailRoute
  '/classic/hello/universe': typeof ClassicHelloUniverseRoute
  '/classic/hello/world': typeof ClassicHelloWorldRoute
  '/classic/hello': typeof ClassicHelloIndexRoute
  '/route-without-file/layout-a': typeof aRoute
  '/route-without-file/layout-b': typeof bRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof homeRoute
  '/_first': typeof layoutFirstLayoutRouteWithChildren
  '/posts': typeof postsPostsRouteWithChildren
  '/classic/hello': typeof ClassicHelloRouteRouteWithChildren
  '/posts/': typeof postsPostsHomeRoute
  '/_first/_second-layout': typeof layoutSecondLayoutRouteWithChildren
  '/posts/$postId': typeof postsPostsDetailRoute
  '/classic/hello/universe': typeof ClassicHelloUniverseRoute
  '/classic/hello/world': typeof ClassicHelloWorldRoute
  '/classic/hello/': typeof ClassicHelloIndexRoute
  '/_first/_second-layout/route-without-file/layout-a': typeof aRoute
  '/_first/_second-layout/route-without-file/layout-b': typeof bRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/posts'
    | '/classic/hello'
    | '/posts/'
    | '/posts/$postId'
    | '/classic/hello/universe'
    | '/classic/hello/world'
    | '/classic/hello/'
    | '/route-without-file/layout-a'
    | '/route-without-file/layout-b'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/posts'
    | '/posts/$postId'
    | '/classic/hello/universe'
    | '/classic/hello/world'
    | '/classic/hello'
    | '/route-without-file/layout-a'
    | '/route-without-file/layout-b'
  id:
    | '__root__'
    | '/'
    | '/_first'
    | '/posts'
    | '/classic/hello'
    | '/posts/'
    | '/_first/_second-layout'
    | '/posts/$postId'
    | '/classic/hello/universe'
    | '/classic/hello/world'
    | '/classic/hello/'
    | '/_first/_second-layout/route-without-file/layout-a'
    | '/_first/_second-layout/route-without-file/layout-b'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  homeRoute: typeof homeRoute
  layoutFirstLayoutRoute: typeof layoutFirstLayoutRouteWithChildren
  postsPostsRoute: typeof postsPostsRouteWithChildren
  ClassicHelloRouteRoute: typeof ClassicHelloRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof homeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_first': {
      id: '/_first'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof layoutFirstLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof postsPostsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/classic/hello': {
      id: '/classic/hello'
      path: '/classic/hello'
      fullPath: '/classic/hello'
      preLoaderRoute: typeof ClassicHelloRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof postsPostsHomeRouteImport
      parentRoute: typeof postsPostsRoute
    }
    '/_first/_second-layout': {
      id: '/_first/_second-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof layoutSecondLayoutRouteImport
      parentRoute: typeof layoutFirstLayoutRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof postsPostsDetailRouteImport
      parentRoute: typeof postsPostsRoute
    }
    '/_first/_second-layout/route-without-file': {
      id: '/_first/_second-layout/route-without-file'
      path: ''
      fullPath: '/route-without-file'
      preLoaderRoute: unknown
      parentRoute: typeof rootRouteImport
    }
    '/classic/hello/universe': {
      id: '/classic/hello/universe'
      path: '/universe'
      fullPath: '/classic/hello/universe'
      preLoaderRoute: typeof ClassicHelloUniverseRouteImport
      parentRoute: typeof ClassicHelloRouteRoute
    }
    '/classic/hello/world': {
      id: '/classic/hello/world'
      path: '/world'
      fullPath: '/classic/hello/world'
      preLoaderRoute: typeof ClassicHelloWorldRouteImport
      parentRoute: typeof ClassicHelloRouteRoute
    }
    '/classic/hello/': {
      id: '/classic/hello/'
      path: '/'
      fullPath: '/classic/hello/'
      preLoaderRoute: typeof ClassicHelloIndexRouteImport
      parentRoute: typeof ClassicHelloRouteRoute
    }
    '/_first/_second-layout/route-without-file/layout-a': {
      id: '/_first/_second-layout/route-without-file/layout-a'
      path: '/route-without-file/layout-a'
      fullPath: '/route-without-file/layout-a'
      preLoaderRoute: typeof aRouteImport
      parentRoute: typeof layoutSecondLayoutRoute
    }
    '/_first/_second-layout/route-without-file/layout-b': {
      id: '/_first/_second-layout/route-without-file/layout-b'
      path: '/route-without-file/layout-b'
      fullPath: '/route-without-file/layout-b'
      preLoaderRoute: typeof bRouteImport
      parentRoute: typeof layoutSecondLayoutRoute
    }
  }
}

interface layoutSecondLayoutRouteChildren {
  aRoute: typeof aRoute
  bRoute: typeof bRoute
}

const layoutSecondLayoutRouteChildren: layoutSecondLayoutRouteChildren = {
  aRoute: aRoute,
  bRoute: bRoute,
}

const layoutSecondLayoutRouteWithChildren =
  layoutSecondLayoutRoute._addFileChildren(layoutSecondLayoutRouteChildren)

interface layoutFirstLayoutRouteChildren {
  layoutSecondLayoutRoute: typeof layoutSecondLayoutRouteWithChildren
}

const layoutFirstLayoutRouteChildren: layoutFirstLayoutRouteChildren = {
  layoutSecondLayoutRoute: layoutSecondLayoutRouteWithChildren,
}

const layoutFirstLayoutRouteWithChildren =
  layoutFirstLayoutRoute._addFileChildren(layoutFirstLayoutRouteChildren)

interface postsPostsRouteChildren {
  postsPostsHomeRoute: typeof postsPostsHomeRoute
  postsPostsDetailRoute: typeof postsPostsDetailRoute
}

const postsPostsRouteChildren: postsPostsRouteChildren = {
  postsPostsHomeRoute: postsPostsHomeRoute,
  postsPostsDetailRoute: postsPostsDetailRoute,
}

const postsPostsRouteWithChildren = postsPostsRoute._addFileChildren(
  postsPostsRouteChildren,
)

interface ClassicHelloRouteRouteChildren {
  ClassicHelloUniverseRoute: typeof ClassicHelloUniverseRoute
  ClassicHelloWorldRoute: typeof ClassicHelloWorldRoute
  ClassicHelloIndexRoute: typeof ClassicHelloIndexRoute
}

const ClassicHelloRouteRouteChildren: ClassicHelloRouteRouteChildren = {
  ClassicHelloUniverseRoute: ClassicHelloUniverseRoute,
  ClassicHelloWorldRoute: ClassicHelloWorldRoute,
  ClassicHelloIndexRoute: ClassicHelloIndexRoute,
}

const ClassicHelloRouteRouteWithChildren =
  ClassicHelloRouteRoute._addFileChildren(ClassicHelloRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  homeRoute: homeRoute,
  layoutFirstLayoutRoute: layoutFirstLayoutRouteWithChildren,
  postsPostsRoute: postsPostsRouteWithChildren,
  ClassicHelloRouteRoute: ClassicHelloRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
