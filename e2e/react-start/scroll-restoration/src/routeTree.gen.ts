/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as testsWithSearchRouteImport } from './routes/(tests)/with-search'
import { Route as testsWithLoaderRouteImport } from './routes/(tests)/with-loader'
import { Route as testsNormalPageRouteImport } from './routes/(tests)/normal-page'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const testsWithSearchRoute = testsWithSearchRouteImport.update({
  id: '/(tests)/with-search',
  path: '/with-search',
  getParentRoute: () => rootRouteImport,
} as any)
const testsWithLoaderRoute = testsWithLoaderRouteImport.update({
  id: '/(tests)/with-loader',
  path: '/with-loader',
  getParentRoute: () => rootRouteImport,
} as any)
const testsNormalPageRoute = testsNormalPageRouteImport.update({
  id: '/(tests)/normal-page',
  path: '/normal-page',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/normal-page': typeof testsNormalPageRoute
  '/with-loader': typeof testsWithLoaderRoute
  '/with-search': typeof testsWithSearchRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/normal-page': typeof testsNormalPageRoute
  '/with-loader': typeof testsWithLoaderRoute
  '/with-search': typeof testsWithSearchRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(tests)/normal-page': typeof testsNormalPageRoute
  '/(tests)/with-loader': typeof testsWithLoaderRoute
  '/(tests)/with-search': typeof testsWithSearchRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/normal-page' | '/with-loader' | '/with-search'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/normal-page' | '/with-loader' | '/with-search'
  id:
    | '__root__'
    | '/'
    | '/(tests)/normal-page'
    | '/(tests)/with-loader'
    | '/(tests)/with-search'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  testsNormalPageRoute: typeof testsNormalPageRoute
  testsWithLoaderRoute: typeof testsWithLoaderRoute
  testsWithSearchRoute: typeof testsWithSearchRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(tests)/with-search': {
      id: '/(tests)/with-search'
      path: '/with-search'
      fullPath: '/with-search'
      preLoaderRoute: typeof testsWithSearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(tests)/with-loader': {
      id: '/(tests)/with-loader'
      path: '/with-loader'
      fullPath: '/with-loader'
      preLoaderRoute: typeof testsWithLoaderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(tests)/normal-page': {
      id: '/(tests)/normal-page'
      path: '/normal-page'
      fullPath: '/normal-page'
      preLoaderRoute: typeof testsNormalPageRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  testsNormalPageRoute: testsNormalPageRoute,
  testsWithLoaderRoute: testsWithLoaderRoute,
  testsWithSearchRoute: testsWithSearchRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
