/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LibraryImport } from './routes/_library'
import { Route as LibraryIndexImport } from './routes/_library.index'
import { Route as ProjectIndexImport } from './routes/$project.index'
import { Route as LibraryProjectImport } from './routes/_library.$project'
import { Route as LibraryProjectVersionIndexImport } from './routes/_library.$project.$version.index'
import { Route as ProjectVersionDocsIndexImport } from './routes/$project.$version.docs.index'
import { Route as ProjectVersionDocsFrameworkFrameworkImport } from './routes/$project.$version.docs.framework.$framework'
import { Route as ProjectVersionDocsFrameworkFrameworkIndexImport } from './routes/$project.$version.docs.framework.$framework.index'
import { Route as ProjectVersionDocsFrameworkFrameworkSplatImport } from './routes/$project.$version.docs.framework.$framework.$'
import { Route as ProjectVersionDocsFrameworkFrameworkExamplesSplatImport } from './routes/$project.$version.docs.framework.$framework.examples.$'

// Create/Update Routes

const LibraryRoute = LibraryImport.update({
  id: '/_library',
  getParentRoute: () => rootRoute,
} as any)

const LibraryIndexRoute = LibraryIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LibraryRoute,
} as any)

const ProjectIndexRoute = ProjectIndexImport.update({
  id: '/$project/',
  path: '/$project/',
  getParentRoute: () => rootRoute,
} as any)

const LibraryProjectRoute = LibraryProjectImport.update({
  id: '/$project',
  path: '/$project',
  getParentRoute: () => LibraryRoute,
} as any)

const LibraryProjectVersionIndexRoute = LibraryProjectVersionIndexImport.update(
  {
    id: '/$version/',
    path: '/$version/',
    getParentRoute: () => LibraryProjectRoute,
  } as any,
)

const ProjectVersionDocsIndexRoute = ProjectVersionDocsIndexImport.update({
  id: '/$project/$version/docs/',
  path: '/$project/$version/docs/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectVersionDocsFrameworkFrameworkRoute =
  ProjectVersionDocsFrameworkFrameworkImport.update({
    id: '/$project/$version/docs/framework/$framework',
    path: '/$project/$version/docs/framework/$framework',
    getParentRoute: () => rootRoute,
  } as any)

const ProjectVersionDocsFrameworkFrameworkIndexRoute =
  ProjectVersionDocsFrameworkFrameworkIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ProjectVersionDocsFrameworkFrameworkRoute,
  } as any)

const ProjectVersionDocsFrameworkFrameworkSplatRoute =
  ProjectVersionDocsFrameworkFrameworkSplatImport.update({
    id: '/$',
    path: '/$',
    getParentRoute: () => ProjectVersionDocsFrameworkFrameworkRoute,
  } as any)

const ProjectVersionDocsFrameworkFrameworkExamplesSplatRoute =
  ProjectVersionDocsFrameworkFrameworkExamplesSplatImport.update({
    id: '/examples/$',
    path: '/examples/$',
    getParentRoute: () => ProjectVersionDocsFrameworkFrameworkRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_library': {
      id: '/_library'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LibraryImport
      parentRoute: typeof rootRoute
    }
    '/_library/$project': {
      id: '/_library/$project'
      path: '/$project'
      fullPath: '/$project'
      preLoaderRoute: typeof LibraryProjectImport
      parentRoute: typeof LibraryImport
    }
    '/$project/': {
      id: '/$project/'
      path: '/$project'
      fullPath: '/$project'
      preLoaderRoute: typeof ProjectIndexImport
      parentRoute: typeof rootRoute
    }
    '/_library/': {
      id: '/_library/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LibraryIndexImport
      parentRoute: typeof LibraryImport
    }
    '/$project/$version/docs/': {
      id: '/$project/$version/docs/'
      path: '/$project/$version/docs'
      fullPath: '/$project/$version/docs'
      preLoaderRoute: typeof ProjectVersionDocsIndexImport
      parentRoute: typeof rootRoute
    }
    '/_library/$project/$version/': {
      id: '/_library/$project/$version/'
      path: '/$version'
      fullPath: '/$project/$version'
      preLoaderRoute: typeof LibraryProjectVersionIndexImport
      parentRoute: typeof LibraryProjectImport
    }
    '/$project/$version/docs/framework/$framework': {
      id: '/$project/$version/docs/framework/$framework'
      path: '/$project/$version/docs/framework/$framework'
      fullPath: '/$project/$version/docs/framework/$framework'
      preLoaderRoute: typeof ProjectVersionDocsFrameworkFrameworkImport
      parentRoute: typeof rootRoute
    }
    '/$project/$version/docs/framework/$framework/$': {
      id: '/$project/$version/docs/framework/$framework/$'
      path: '/$'
      fullPath: '/$project/$version/docs/framework/$framework/$'
      preLoaderRoute: typeof ProjectVersionDocsFrameworkFrameworkSplatImport
      parentRoute: typeof ProjectVersionDocsFrameworkFrameworkImport
    }
    '/$project/$version/docs/framework/$framework/': {
      id: '/$project/$version/docs/framework/$framework/'
      path: '/'
      fullPath: '/$project/$version/docs/framework/$framework/'
      preLoaderRoute: typeof ProjectVersionDocsFrameworkFrameworkIndexImport
      parentRoute: typeof ProjectVersionDocsFrameworkFrameworkImport
    }
    '/$project/$version/docs/framework/$framework/examples/$': {
      id: '/$project/$version/docs/framework/$framework/examples/$'
      path: '/examples/$'
      fullPath: '/$project/$version/docs/framework/$framework/examples/$'
      preLoaderRoute: typeof ProjectVersionDocsFrameworkFrameworkExamplesSplatImport
      parentRoute: typeof ProjectVersionDocsFrameworkFrameworkImport
    }
  }
}

// Create and export the route tree

interface LibraryProjectRouteChildren {
  LibraryProjectVersionIndexRoute: typeof LibraryProjectVersionIndexRoute
}

const LibraryProjectRouteChildren: LibraryProjectRouteChildren = {
  LibraryProjectVersionIndexRoute: LibraryProjectVersionIndexRoute,
}

const LibraryProjectRouteWithChildren = LibraryProjectRoute._addFileChildren(
  LibraryProjectRouteChildren,
)

interface LibraryRouteChildren {
  LibraryProjectRoute: typeof LibraryProjectRouteWithChildren
  LibraryIndexRoute: typeof LibraryIndexRoute
}

const LibraryRouteChildren: LibraryRouteChildren = {
  LibraryProjectRoute: LibraryProjectRouteWithChildren,
  LibraryIndexRoute: LibraryIndexRoute,
}

const LibraryRouteWithChildren =
  LibraryRoute._addFileChildren(LibraryRouteChildren)

interface ProjectVersionDocsFrameworkFrameworkRouteChildren {
  ProjectVersionDocsFrameworkFrameworkSplatRoute: typeof ProjectVersionDocsFrameworkFrameworkSplatRoute
  ProjectVersionDocsFrameworkFrameworkIndexRoute: typeof ProjectVersionDocsFrameworkFrameworkIndexRoute
  ProjectVersionDocsFrameworkFrameworkExamplesSplatRoute: typeof ProjectVersionDocsFrameworkFrameworkExamplesSplatRoute
}

const ProjectVersionDocsFrameworkFrameworkRouteChildren: ProjectVersionDocsFrameworkFrameworkRouteChildren =
  {
    ProjectVersionDocsFrameworkFrameworkSplatRoute:
      ProjectVersionDocsFrameworkFrameworkSplatRoute,
    ProjectVersionDocsFrameworkFrameworkIndexRoute:
      ProjectVersionDocsFrameworkFrameworkIndexRoute,
    ProjectVersionDocsFrameworkFrameworkExamplesSplatRoute:
      ProjectVersionDocsFrameworkFrameworkExamplesSplatRoute,
  }

const ProjectVersionDocsFrameworkFrameworkRouteWithChildren =
  ProjectVersionDocsFrameworkFrameworkRoute._addFileChildren(
    ProjectVersionDocsFrameworkFrameworkRouteChildren,
  )

export interface FileRoutesByFullPath {
  '': typeof LibraryRouteWithChildren
  '/$project': typeof ProjectIndexRoute
  '/': typeof LibraryIndexRoute
  '/$project/$version/docs': typeof ProjectVersionDocsIndexRoute
  '/$project/$version': typeof LibraryProjectVersionIndexRoute
  '/$project/$version/docs/framework/$framework': typeof ProjectVersionDocsFrameworkFrameworkRouteWithChildren
  '/$project/$version/docs/framework/$framework/$': typeof ProjectVersionDocsFrameworkFrameworkSplatRoute
  '/$project/$version/docs/framework/$framework/': typeof ProjectVersionDocsFrameworkFrameworkIndexRoute
  '/$project/$version/docs/framework/$framework/examples/$': typeof ProjectVersionDocsFrameworkFrameworkExamplesSplatRoute
}

export interface FileRoutesByTo {
  '/$project': typeof ProjectIndexRoute
  '/': typeof LibraryIndexRoute
  '/$project/$version/docs': typeof ProjectVersionDocsIndexRoute
  '/$project/$version': typeof LibraryProjectVersionIndexRoute
  '/$project/$version/docs/framework/$framework/$': typeof ProjectVersionDocsFrameworkFrameworkSplatRoute
  '/$project/$version/docs/framework/$framework': typeof ProjectVersionDocsFrameworkFrameworkIndexRoute
  '/$project/$version/docs/framework/$framework/examples/$': typeof ProjectVersionDocsFrameworkFrameworkExamplesSplatRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_library': typeof LibraryRouteWithChildren
  '/_library/$project': typeof LibraryProjectRouteWithChildren
  '/$project/': typeof ProjectIndexRoute
  '/_library/': typeof LibraryIndexRoute
  '/$project/$version/docs/': typeof ProjectVersionDocsIndexRoute
  '/_library/$project/$version/': typeof LibraryProjectVersionIndexRoute
  '/$project/$version/docs/framework/$framework': typeof ProjectVersionDocsFrameworkFrameworkRouteWithChildren
  '/$project/$version/docs/framework/$framework/$': typeof ProjectVersionDocsFrameworkFrameworkSplatRoute
  '/$project/$version/docs/framework/$framework/': typeof ProjectVersionDocsFrameworkFrameworkIndexRoute
  '/$project/$version/docs/framework/$framework/examples/$': typeof ProjectVersionDocsFrameworkFrameworkExamplesSplatRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/$project'
    | '/'
    | '/$project/$version/docs'
    | '/$project/$version'
    | '/$project/$version/docs/framework/$framework'
    | '/$project/$version/docs/framework/$framework/$'
    | '/$project/$version/docs/framework/$framework/'
    | '/$project/$version/docs/framework/$framework/examples/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/$project'
    | '/'
    | '/$project/$version/docs'
    | '/$project/$version'
    | '/$project/$version/docs/framework/$framework/$'
    | '/$project/$version/docs/framework/$framework'
    | '/$project/$version/docs/framework/$framework/examples/$'
  id:
    | '__root__'
    | '/_library'
    | '/_library/$project'
    | '/$project/'
    | '/_library/'
    | '/$project/$version/docs/'
    | '/_library/$project/$version/'
    | '/$project/$version/docs/framework/$framework'
    | '/$project/$version/docs/framework/$framework/$'
    | '/$project/$version/docs/framework/$framework/'
    | '/$project/$version/docs/framework/$framework/examples/$'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LibraryRoute: typeof LibraryRouteWithChildren
  ProjectIndexRoute: typeof ProjectIndexRoute
  ProjectVersionDocsIndexRoute: typeof ProjectVersionDocsIndexRoute
  ProjectVersionDocsFrameworkFrameworkRoute: typeof ProjectVersionDocsFrameworkFrameworkRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LibraryRoute: LibraryRouteWithChildren,
  ProjectIndexRoute: ProjectIndexRoute,
  ProjectVersionDocsIndexRoute: ProjectVersionDocsIndexRoute,
  ProjectVersionDocsFrameworkFrameworkRoute:
    ProjectVersionDocsFrameworkFrameworkRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_library",
        "/$project/",
        "/$project/$version/docs/",
        "/$project/$version/docs/framework/$framework"
      ]
    },
    "/_library": {
      "filePath": "_library.tsx",
      "children": [
        "/_library/$project",
        "/_library/"
      ]
    },
    "/_library/$project": {
      "filePath": "_library.$project.tsx",
      "parent": "/_library",
      "children": [
        "/_library/$project/$version/"
      ]
    },
    "/$project/": {
      "filePath": "$project.index.tsx"
    },
    "/_library/": {
      "filePath": "_library.index.tsx",
      "parent": "/_library"
    },
    "/$project/$version/docs/": {
      "filePath": "$project.$version.docs.index.tsx"
    },
    "/_library/$project/$version/": {
      "filePath": "_library.$project.$version.index.tsx",
      "parent": "/_library/$project"
    },
    "/$project/$version/docs/framework/$framework": {
      "filePath": "$project.$version.docs.framework.$framework.tsx",
      "children": [
        "/$project/$version/docs/framework/$framework/$",
        "/$project/$version/docs/framework/$framework/",
        "/$project/$version/docs/framework/$framework/examples/$"
      ]
    },
    "/$project/$version/docs/framework/$framework/$": {
      "filePath": "$project.$version.docs.framework.$framework.$.tsx",
      "parent": "/$project/$version/docs/framework/$framework"
    },
    "/$project/$version/docs/framework/$framework/": {
      "filePath": "$project.$version.docs.framework.$framework.index.tsx",
      "parent": "/$project/$version/docs/framework/$framework"
    },
    "/$project/$version/docs/framework/$framework/examples/$": {
      "filePath": "$project.$version.docs.framework.$framework.examples.$.tsx",
      "parent": "/$project/$version/docs/framework/$framework"
    }
  }
}
ROUTE_MANIFEST_END */
