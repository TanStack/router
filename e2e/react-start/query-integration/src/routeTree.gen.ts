/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UseSuspenseQueryRouteImport } from './routes/useSuspenseQuery'
import { Route as UseQueryRouteImport } from './routes/useQuery'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LoaderFetchQueryTypeRouteImport } from './routes/loader-fetchQuery/$type'

const UseSuspenseQueryRoute = UseSuspenseQueryRouteImport.update({
  id: '/useSuspenseQuery',
  path: '/useSuspenseQuery',
  getParentRoute: () => rootRouteImport,
} as any)
const UseQueryRoute = UseQueryRouteImport.update({
  id: '/useQuery',
  path: '/useQuery',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoaderFetchQueryTypeRoute = LoaderFetchQueryTypeRouteImport.update({
  id: '/loader-fetchQuery/$type',
  path: '/loader-fetchQuery/$type',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/useQuery': typeof UseQueryRoute
  '/useSuspenseQuery': typeof UseSuspenseQueryRoute
  '/loader-fetchQuery/$type': typeof LoaderFetchQueryTypeRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/useQuery': typeof UseQueryRoute
  '/useSuspenseQuery': typeof UseSuspenseQueryRoute
  '/loader-fetchQuery/$type': typeof LoaderFetchQueryTypeRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/useQuery': typeof UseQueryRoute
  '/useSuspenseQuery': typeof UseSuspenseQueryRoute
  '/loader-fetchQuery/$type': typeof LoaderFetchQueryTypeRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/useQuery'
    | '/useSuspenseQuery'
    | '/loader-fetchQuery/$type'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/useQuery' | '/useSuspenseQuery' | '/loader-fetchQuery/$type'
  id:
    | '__root__'
    | '/'
    | '/useQuery'
    | '/useSuspenseQuery'
    | '/loader-fetchQuery/$type'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UseQueryRoute: typeof UseQueryRoute
  UseSuspenseQueryRoute: typeof UseSuspenseQueryRoute
  LoaderFetchQueryTypeRoute: typeof LoaderFetchQueryTypeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/useSuspenseQuery': {
      id: '/useSuspenseQuery'
      path: '/useSuspenseQuery'
      fullPath: '/useSuspenseQuery'
      preLoaderRoute: typeof UseSuspenseQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/useQuery': {
      id: '/useQuery'
      path: '/useQuery'
      fullPath: '/useQuery'
      preLoaderRoute: typeof UseQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/loader-fetchQuery/$type': {
      id: '/loader-fetchQuery/$type'
      path: '/loader-fetchQuery/$type'
      fullPath: '/loader-fetchQuery/$type'
      preLoaderRoute: typeof LoaderFetchQueryTypeRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UseQueryRoute: UseQueryRoute,
  UseSuspenseQueryRoute: UseSuspenseQueryRoute,
  LoaderFetchQueryTypeRoute: LoaderFetchQueryTypeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
