/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/solid-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as testsPageWithSearchImport } from './routes/(tests)/page-with-search'
import { Route as testsNormalPageImport } from './routes/(tests)/normal-page'
import { Route as testsLazyWithLoaderPageImport } from './routes/(tests)/lazy-with-loader-page'
import { Route as testsLazyPageImport } from './routes/(tests)/lazy-page'

// Create Virtual Routes

const testsVirtualPageLazyImport = createFileRoute('/(tests)/virtual-page')()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const testsVirtualPageLazyRoute = testsVirtualPageLazyImport
  .update({
    id: '/(tests)/virtual-page',
    path: '/virtual-page',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(tests)/virtual-page.lazy').then((d) => d.Route))

const testsPageWithSearchRoute = testsPageWithSearchImport.update({
  id: '/(tests)/page-with-search',
  path: '/page-with-search',
  getParentRoute: () => rootRoute,
} as any)

const testsNormalPageRoute = testsNormalPageImport.update({
  id: '/(tests)/normal-page',
  path: '/normal-page',
  getParentRoute: () => rootRoute,
} as any)

const testsLazyWithLoaderPageRoute = testsLazyWithLoaderPageImport
  .update({
    id: '/(tests)/lazy-with-loader-page',
    path: '/lazy-with-loader-page',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() =>
    import('./routes/(tests)/lazy-with-loader-page.lazy').then((d) => d.Route),
  )

const testsLazyPageRoute = testsLazyPageImport
  .update({
    id: '/(tests)/lazy-page',
    path: '/lazy-page',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(tests)/lazy-page.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(tests)/lazy-page': {
      id: '/(tests)/lazy-page'
      path: '/lazy-page'
      fullPath: '/lazy-page'
      preLoaderRoute: typeof testsLazyPageImport
      parentRoute: typeof rootRoute
    }
    '/(tests)/lazy-with-loader-page': {
      id: '/(tests)/lazy-with-loader-page'
      path: '/lazy-with-loader-page'
      fullPath: '/lazy-with-loader-page'
      preLoaderRoute: typeof testsLazyWithLoaderPageImport
      parentRoute: typeof rootRoute
    }
    '/(tests)/normal-page': {
      id: '/(tests)/normal-page'
      path: '/normal-page'
      fullPath: '/normal-page'
      preLoaderRoute: typeof testsNormalPageImport
      parentRoute: typeof rootRoute
    }
    '/(tests)/page-with-search': {
      id: '/(tests)/page-with-search'
      path: '/page-with-search'
      fullPath: '/page-with-search'
      preLoaderRoute: typeof testsPageWithSearchImport
      parentRoute: typeof rootRoute
    }
    '/(tests)/virtual-page': {
      id: '/(tests)/virtual-page'
      path: '/virtual-page'
      fullPath: '/virtual-page'
      preLoaderRoute: typeof testsVirtualPageLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/lazy-page': typeof testsLazyPageRoute
  '/lazy-with-loader-page': typeof testsLazyWithLoaderPageRoute
  '/normal-page': typeof testsNormalPageRoute
  '/page-with-search': typeof testsPageWithSearchRoute
  '/virtual-page': typeof testsVirtualPageLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/lazy-page': typeof testsLazyPageRoute
  '/lazy-with-loader-page': typeof testsLazyWithLoaderPageRoute
  '/normal-page': typeof testsNormalPageRoute
  '/page-with-search': typeof testsPageWithSearchRoute
  '/virtual-page': typeof testsVirtualPageLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(tests)/lazy-page': typeof testsLazyPageRoute
  '/(tests)/lazy-with-loader-page': typeof testsLazyWithLoaderPageRoute
  '/(tests)/normal-page': typeof testsNormalPageRoute
  '/(tests)/page-with-search': typeof testsPageWithSearchRoute
  '/(tests)/virtual-page': typeof testsVirtualPageLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/lazy-page'
    | '/lazy-with-loader-page'
    | '/normal-page'
    | '/page-with-search'
    | '/virtual-page'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/lazy-page'
    | '/lazy-with-loader-page'
    | '/normal-page'
    | '/page-with-search'
    | '/virtual-page'
  id:
    | '__root__'
    | '/'
    | '/(tests)/lazy-page'
    | '/(tests)/lazy-with-loader-page'
    | '/(tests)/normal-page'
    | '/(tests)/page-with-search'
    | '/(tests)/virtual-page'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  testsLazyPageRoute: typeof testsLazyPageRoute
  testsLazyWithLoaderPageRoute: typeof testsLazyWithLoaderPageRoute
  testsNormalPageRoute: typeof testsNormalPageRoute
  testsPageWithSearchRoute: typeof testsPageWithSearchRoute
  testsVirtualPageLazyRoute: typeof testsVirtualPageLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  testsLazyPageRoute: testsLazyPageRoute,
  testsLazyWithLoaderPageRoute: testsLazyWithLoaderPageRoute,
  testsNormalPageRoute: testsNormalPageRoute,
  testsPageWithSearchRoute: testsPageWithSearchRoute,
  testsVirtualPageLazyRoute: testsVirtualPageLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(tests)/lazy-page",
        "/(tests)/lazy-with-loader-page",
        "/(tests)/normal-page",
        "/(tests)/page-with-search",
        "/(tests)/virtual-page"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(tests)/lazy-page": {
      "filePath": "(tests)/lazy-page.tsx"
    },
    "/(tests)/lazy-with-loader-page": {
      "filePath": "(tests)/lazy-with-loader-page.tsx"
    },
    "/(tests)/normal-page": {
      "filePath": "(tests)/normal-page.tsx"
    },
    "/(tests)/page-with-search": {
      "filePath": "(tests)/page-with-search.tsx"
    },
    "/(tests)/virtual-page": {
      "filePath": "(tests)/virtual-page.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
