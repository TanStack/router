/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/solid-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as testsPageWithSearchRouteImport } from './routes/(tests)/page-with-search'
import { Route as testsNormalPageRouteImport } from './routes/(tests)/normal-page'
import { Route as testsLazyWithLoaderPageRouteImport } from './routes/(tests)/lazy-with-loader-page'
import { Route as testsLazyPageRouteImport } from './routes/(tests)/lazy-page'

const testsVirtualPageLazyRouteImport = createFileRoute(
  '/(tests)/virtual-page',
)()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const testsVirtualPageLazyRoute = testsVirtualPageLazyRouteImport
  .update({
    id: '/(tests)/virtual-page',
    path: '/virtual-page',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(tests)/virtual-page.lazy').then((d) => d.Route))
const testsPageWithSearchRoute = testsPageWithSearchRouteImport.update({
  id: '/(tests)/page-with-search',
  path: '/page-with-search',
  getParentRoute: () => rootRouteImport,
} as any)
const testsNormalPageRoute = testsNormalPageRouteImport.update({
  id: '/(tests)/normal-page',
  path: '/normal-page',
  getParentRoute: () => rootRouteImport,
} as any)
const testsLazyWithLoaderPageRoute = testsLazyWithLoaderPageRouteImport
  .update({
    id: '/(tests)/lazy-with-loader-page',
    path: '/lazy-with-loader-page',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() =>
    import('./routes/(tests)/lazy-with-loader-page.lazy').then((d) => d.Route),
  )
const testsLazyPageRoute = testsLazyPageRouteImport
  .update({
    id: '/(tests)/lazy-page',
    path: '/lazy-page',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(tests)/lazy-page.lazy').then((d) => d.Route))

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/lazy-page': typeof testsLazyPageRoute
  '/lazy-with-loader-page': typeof testsLazyWithLoaderPageRoute
  '/normal-page': typeof testsNormalPageRoute
  '/page-with-search': typeof testsPageWithSearchRoute
  '/virtual-page': typeof testsVirtualPageLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/lazy-page': typeof testsLazyPageRoute
  '/lazy-with-loader-page': typeof testsLazyWithLoaderPageRoute
  '/normal-page': typeof testsNormalPageRoute
  '/page-with-search': typeof testsPageWithSearchRoute
  '/virtual-page': typeof testsVirtualPageLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(tests)/lazy-page': typeof testsLazyPageRoute
  '/(tests)/lazy-with-loader-page': typeof testsLazyWithLoaderPageRoute
  '/(tests)/normal-page': typeof testsNormalPageRoute
  '/(tests)/page-with-search': typeof testsPageWithSearchRoute
  '/(tests)/virtual-page': typeof testsVirtualPageLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/lazy-page'
    | '/lazy-with-loader-page'
    | '/normal-page'
    | '/page-with-search'
    | '/virtual-page'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/lazy-page'
    | '/lazy-with-loader-page'
    | '/normal-page'
    | '/page-with-search'
    | '/virtual-page'
  id:
    | '__root__'
    | '/'
    | '/(tests)/lazy-page'
    | '/(tests)/lazy-with-loader-page'
    | '/(tests)/normal-page'
    | '/(tests)/page-with-search'
    | '/(tests)/virtual-page'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  testsLazyPageRoute: typeof testsLazyPageRoute
  testsLazyWithLoaderPageRoute: typeof testsLazyWithLoaderPageRoute
  testsNormalPageRoute: typeof testsNormalPageRoute
  testsPageWithSearchRoute: typeof testsPageWithSearchRoute
  testsVirtualPageLazyRoute: typeof testsVirtualPageLazyRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(tests)/virtual-page': {
      id: '/(tests)/virtual-page'
      path: '/virtual-page'
      fullPath: '/virtual-page'
      preLoaderRoute: typeof testsVirtualPageLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(tests)/page-with-search': {
      id: '/(tests)/page-with-search'
      path: '/page-with-search'
      fullPath: '/page-with-search'
      preLoaderRoute: typeof testsPageWithSearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(tests)/normal-page': {
      id: '/(tests)/normal-page'
      path: '/normal-page'
      fullPath: '/normal-page'
      preLoaderRoute: typeof testsNormalPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(tests)/lazy-with-loader-page': {
      id: '/(tests)/lazy-with-loader-page'
      path: '/lazy-with-loader-page'
      fullPath: '/lazy-with-loader-page'
      preLoaderRoute: typeof testsLazyWithLoaderPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(tests)/lazy-page': {
      id: '/(tests)/lazy-page'
      path: '/lazy-page'
      fullPath: '/lazy-page'
      preLoaderRoute: typeof testsLazyPageRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  testsLazyPageRoute: testsLazyPageRoute,
  testsLazyWithLoaderPageRoute: testsLazyWithLoaderPageRoute,
  testsNormalPageRoute: testsNormalPageRoute,
  testsPageWithSearchRoute: testsPageWithSearchRoute,
  testsVirtualPageLazyRoute: testsVirtualPageLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
