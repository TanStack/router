/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/solid-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as RemountDepsRouteImport } from './routes/remountDeps'
import { Route as PostsRouteImport } from './routes/posts'
import { Route as NotRemountDepsRouteImport } from './routes/notRemountDeps'
import { Route as EditingBRouteImport } from './routes/editing-b'
import { Route as EditingARouteImport } from './routes/editing-a'
import { Route as ComponentTypesTestRouteImport } from './routes/component-types-test'
import { Route as AnchorRouteImport } from './routes/anchor'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as SearchParamsRouteRouteImport } from './routes/search-params/route'
import { Route as NonNestedRouteRouteImport } from './routes/non-nested/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SearchParamsIndexRouteImport } from './routes/search-params/index'
import { Route as RelativeIndexRouteImport } from './routes/relative/index'
import { Route as RedirectIndexRouteImport } from './routes/redirect/index'
import { Route as PostsIndexRouteImport } from './routes/posts.index'
import { Route as ParamsPsIndexRouteImport } from './routes/params-ps/index'
import { Route as SearchParamsDefaultRouteImport } from './routes/search-params/default'
import { Route as RedirectTargetRouteImport } from './routes/redirect/$target'
import { Route as PostsPostIdRouteImport } from './routes/posts.$postId'
import { Route as NonNestedBazRouteImport } from './routes/non-nested/baz'
import { Route as LayoutLayout2RouteImport } from './routes/_layout/_layout-2'
import { Route as groupLazyinsideRouteImport } from './routes/(group)/lazyinside'
import { Route as groupInsideRouteImport } from './routes/(group)/inside'
import { Route as groupLayoutRouteImport } from './routes/(group)/_layout'
import { Route as anotherGroupOnlyrouteinsideRouteImport } from './routes/(another-group)/onlyrouteinside'
import { Route as RelativeUseNavigateRouteRouteImport } from './routes/relative/useNavigate/route'
import { Route as RelativeLinkRouteRouteImport } from './routes/relative/link/route'
import { Route as ParamsPsNonNestedRouteRouteImport } from './routes/params-ps/non-nested/route'
import { Route as RedirectTargetIndexRouteImport } from './routes/redirect/$target/index'
import { Route as RelativeUseNavigateRelativeUseNavigateBRouteImport } from './routes/relative/useNavigate/relative-useNavigate-b'
import { Route as RelativeUseNavigateRelativeUseNavigateARouteImport } from './routes/relative/useNavigate/relative-useNavigate-a'
import { Route as RelativeLinkRelativeLinkBRouteImport } from './routes/relative/link/relative-link-b'
import { Route as RelativeLinkRelativeLinkARouteImport } from './routes/relative/link/relative-link-a'
import { Route as RedirectPreloadThirdRouteImport } from './routes/redirect/preload/third'
import { Route as RedirectPreloadSecondRouteImport } from './routes/redirect/preload/second'
import { Route as RedirectPreloadFirstRouteImport } from './routes/redirect/preload/first'
import { Route as RedirectTargetViaLoaderRouteImport } from './routes/redirect/$target/via-loader'
import { Route as RedirectTargetViaBeforeLoadRouteImport } from './routes/redirect/$target/via-beforeLoad'
import { Route as PostsPostIdEditRouteImport } from './routes/posts_.$postId.edit'
import { Route as ParamsSingleValueRouteImport } from './routes/params.single.$value'
import { Route as NonNestedBazBazidRouteImport } from './routes/non-nested/baz.$bazid'
import { Route as LayoutLayout2LayoutBRouteImport } from './routes/_layout/_layout-2/layout-b'
import { Route as LayoutLayout2LayoutARouteImport } from './routes/_layout/_layout-2/layout-a'
import { Route as groupSubfolderInsideRouteImport } from './routes/(group)/subfolder/inside'
import { Route as groupLayoutInsidelayoutRouteImport } from './routes/(group)/_layout.insidelayout'
import { Route as ParamsPsNonNestedFooRouteRouteImport } from './routes/params-ps/non-nested/$foo_/route'
import { Route as ParamsPsNamedFooRouteRouteImport } from './routes/params-ps/named/$foo/route'
import { Route as RelativeUseNavigateWithSearchIndexRouteImport } from './routes/relative/useNavigate/with-search/index'
import { Route as RelativeUseNavigatePathIndexRouteImport } from './routes/relative/useNavigate/path/index'
import { Route as RelativeUseNavigateNestedIndexRouteImport } from './routes/relative/useNavigate/nested/index'
import { Route as RelativeLinkWithSearchIndexRouteImport } from './routes/relative/link/with-search/index'
import { Route as RelativeLinkPathIndexRouteImport } from './routes/relative/link/path/index'
import { Route as RelativeLinkNestedIndexRouteImport } from './routes/relative/link/nested/index'
import { Route as ParamsPsNonNestedFooBarRouteImport } from './routes/params-ps/non-nested/$foo_/$bar'
import { Route as NonNestedBazBazidEditRouteImport } from './routes/non-nested/baz_.$bazid.edit'
import { Route as ParamsPsNamedFooBarRouteRouteImport } from './routes/params-ps/named/$foo/$bar.route'
import { Route as RelativeUseNavigatePathPathIndexRouteImport } from './routes/relative/useNavigate/path/$path/index'
import { Route as RelativeUseNavigateNestedDeepIndexRouteImport } from './routes/relative/useNavigate/nested/deep/index'
import { Route as RelativeLinkPathPathIndexRouteImport } from './routes/relative/link/path/$path/index'
import { Route as RelativeLinkNestedDeepIndexRouteImport } from './routes/relative/link/nested/deep/index'
import { Route as ParamsPsNamedFooBarBazRouteImport } from './routes/params-ps/named/$foo/$bar.$baz'

const groupRouteImport = createFileRoute('/(group)')()

const groupRoute = groupRouteImport.update({
  id: '/(group)',
  getParentRoute: () => rootRouteImport,
} as any)
const RemountDepsRoute = RemountDepsRouteImport.update({
  id: '/remountDeps',
  path: '/remountDeps',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsRoute = PostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRouteImport,
} as any)
const NotRemountDepsRoute = NotRemountDepsRouteImport.update({
  id: '/notRemountDeps',
  path: '/notRemountDeps',
  getParentRoute: () => rootRouteImport,
} as any)
const EditingBRoute = EditingBRouteImport.update({
  id: '/editing-b',
  path: '/editing-b',
  getParentRoute: () => rootRouteImport,
} as any)
const EditingARoute = EditingARouteImport.update({
  id: '/editing-a',
  path: '/editing-a',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentTypesTestRoute = ComponentTypesTestRouteImport.update({
  id: '/component-types-test',
  path: '/component-types-test',
  getParentRoute: () => rootRouteImport,
} as any)
const AnchorRoute = AnchorRouteImport.update({
  id: '/anchor',
  path: '/anchor',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchParamsRouteRoute = SearchParamsRouteRouteImport.update({
  id: '/search-params',
  path: '/search-params',
  getParentRoute: () => rootRouteImport,
} as any)
const NonNestedRouteRoute = NonNestedRouteRouteImport.update({
  id: '/non-nested',
  path: '/non-nested',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchParamsIndexRoute = SearchParamsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SearchParamsRouteRoute,
} as any)
const RelativeIndexRoute = RelativeIndexRouteImport.update({
  id: '/relative/',
  path: '/relative/',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectIndexRoute = RedirectIndexRouteImport.update({
  id: '/redirect/',
  path: '/redirect/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRoute,
} as any)
const ParamsPsIndexRoute = ParamsPsIndexRouteImport.update({
  id: '/params-ps/',
  path: '/params-ps/',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchParamsDefaultRoute = SearchParamsDefaultRouteImport.update({
  id: '/default',
  path: '/default',
  getParentRoute: () => SearchParamsRouteRoute,
} as any)
const RedirectTargetRoute = RedirectTargetRouteImport.update({
  id: '/redirect/$target',
  path: '/redirect/$target',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsPostIdRoute = PostsPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRoute,
} as any)
const NonNestedBazRoute = NonNestedBazRouteImport.update({
  id: '/baz',
  path: '/baz',
  getParentRoute: () => NonNestedRouteRoute,
} as any)
const LayoutLayout2Route = LayoutLayout2RouteImport.update({
  id: '/_layout-2',
  getParentRoute: () => LayoutRoute,
} as any)
const groupLazyinsideRoute = groupLazyinsideRouteImport
  .update({
    id: '/lazyinside',
    path: '/lazyinside',
    getParentRoute: () => groupRoute,
  } as any)
  .lazy(() => import('./routes/(group)/lazyinside.lazy').then((d) => d.Route))
const groupInsideRoute = groupInsideRouteImport.update({
  id: '/inside',
  path: '/inside',
  getParentRoute: () => groupRoute,
} as any)
const groupLayoutRoute = groupLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => groupRoute,
} as any)
const anotherGroupOnlyrouteinsideRoute =
  anotherGroupOnlyrouteinsideRouteImport.update({
    id: '/(another-group)/onlyrouteinside',
    path: '/onlyrouteinside',
    getParentRoute: () => rootRouteImport,
  } as any)
const RelativeUseNavigateRouteRoute =
  RelativeUseNavigateRouteRouteImport.update({
    id: '/relative/useNavigate',
    path: '/relative/useNavigate',
    getParentRoute: () => rootRouteImport,
  } as any)
const RelativeLinkRouteRoute = RelativeLinkRouteRouteImport.update({
  id: '/relative/link',
  path: '/relative/link',
  getParentRoute: () => rootRouteImport,
} as any)
const ParamsPsNonNestedRouteRoute = ParamsPsNonNestedRouteRouteImport.update({
  id: '/params-ps/non-nested',
  path: '/params-ps/non-nested',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectTargetIndexRoute = RedirectTargetIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RedirectTargetRoute,
} as any)
const RelativeUseNavigateRelativeUseNavigateBRoute =
  RelativeUseNavigateRelativeUseNavigateBRouteImport.update({
    id: '/relative-useNavigate-b',
    path: '/relative-useNavigate-b',
    getParentRoute: () => RelativeUseNavigateRouteRoute,
  } as any)
const RelativeUseNavigateRelativeUseNavigateARoute =
  RelativeUseNavigateRelativeUseNavigateARouteImport.update({
    id: '/relative-useNavigate-a',
    path: '/relative-useNavigate-a',
    getParentRoute: () => RelativeUseNavigateRouteRoute,
  } as any)
const RelativeLinkRelativeLinkBRoute =
  RelativeLinkRelativeLinkBRouteImport.update({
    id: '/relative-link-b',
    path: '/relative-link-b',
    getParentRoute: () => RelativeLinkRouteRoute,
  } as any)
const RelativeLinkRelativeLinkARoute =
  RelativeLinkRelativeLinkARouteImport.update({
    id: '/relative-link-a',
    path: '/relative-link-a',
    getParentRoute: () => RelativeLinkRouteRoute,
  } as any)
const RedirectPreloadThirdRoute = RedirectPreloadThirdRouteImport.update({
  id: '/redirect/preload/third',
  path: '/redirect/preload/third',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectPreloadSecondRoute = RedirectPreloadSecondRouteImport.update({
  id: '/redirect/preload/second',
  path: '/redirect/preload/second',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectPreloadFirstRoute = RedirectPreloadFirstRouteImport.update({
  id: '/redirect/preload/first',
  path: '/redirect/preload/first',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectTargetViaLoaderRoute = RedirectTargetViaLoaderRouteImport.update({
  id: '/via-loader',
  path: '/via-loader',
  getParentRoute: () => RedirectTargetRoute,
} as any)
const RedirectTargetViaBeforeLoadRoute =
  RedirectTargetViaBeforeLoadRouteImport.update({
    id: '/via-beforeLoad',
    path: '/via-beforeLoad',
    getParentRoute: () => RedirectTargetRoute,
  } as any)
const PostsPostIdEditRoute = PostsPostIdEditRouteImport.update({
  id: '/posts_/$postId/edit',
  path: '/posts/$postId/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const ParamsSingleValueRoute = ParamsSingleValueRouteImport.update({
  id: '/params/single/$value',
  path: '/params/single/$value',
  getParentRoute: () => rootRouteImport,
} as any)
const NonNestedBazBazidRoute = NonNestedBazBazidRouteImport.update({
  id: '/$bazid',
  path: '/$bazid',
  getParentRoute: () => NonNestedBazRoute,
} as any)
const LayoutLayout2LayoutBRoute = LayoutLayout2LayoutBRouteImport.update({
  id: '/layout-b',
  path: '/layout-b',
  getParentRoute: () => LayoutLayout2Route,
} as any)
const LayoutLayout2LayoutARoute = LayoutLayout2LayoutARouteImport.update({
  id: '/layout-a',
  path: '/layout-a',
  getParentRoute: () => LayoutLayout2Route,
} as any)
const groupSubfolderInsideRoute = groupSubfolderInsideRouteImport.update({
  id: '/subfolder/inside',
  path: '/subfolder/inside',
  getParentRoute: () => groupRoute,
} as any)
const groupLayoutInsidelayoutRoute = groupLayoutInsidelayoutRouteImport.update({
  id: '/insidelayout',
  path: '/insidelayout',
  getParentRoute: () => groupLayoutRoute,
} as any)
const ParamsPsNonNestedFooRouteRoute =
  ParamsPsNonNestedFooRouteRouteImport.update({
    id: '/$foo_',
    path: '/$foo',
    getParentRoute: () => ParamsPsNonNestedRouteRoute,
  } as any)
const ParamsPsNamedFooRouteRoute = ParamsPsNamedFooRouteRouteImport.update({
  id: '/params-ps/named/$foo',
  path: '/params-ps/named/$foo',
  getParentRoute: () => rootRouteImport,
} as any)
const RelativeUseNavigateWithSearchIndexRoute =
  RelativeUseNavigateWithSearchIndexRouteImport.update({
    id: '/with-search/',
    path: '/with-search/',
    getParentRoute: () => RelativeUseNavigateRouteRoute,
  } as any)
const RelativeUseNavigatePathIndexRoute =
  RelativeUseNavigatePathIndexRouteImport.update({
    id: '/path/',
    path: '/path/',
    getParentRoute: () => RelativeUseNavigateRouteRoute,
  } as any)
const RelativeUseNavigateNestedIndexRoute =
  RelativeUseNavigateNestedIndexRouteImport.update({
    id: '/nested/',
    path: '/nested/',
    getParentRoute: () => RelativeUseNavigateRouteRoute,
  } as any)
const RelativeLinkWithSearchIndexRoute =
  RelativeLinkWithSearchIndexRouteImport.update({
    id: '/with-search/',
    path: '/with-search/',
    getParentRoute: () => RelativeLinkRouteRoute,
  } as any)
const RelativeLinkPathIndexRoute = RelativeLinkPathIndexRouteImport.update({
  id: '/path/',
  path: '/path/',
  getParentRoute: () => RelativeLinkRouteRoute,
} as any)
const RelativeLinkNestedIndexRoute = RelativeLinkNestedIndexRouteImport.update({
  id: '/nested/',
  path: '/nested/',
  getParentRoute: () => RelativeLinkRouteRoute,
} as any)
const ParamsPsNonNestedFooBarRoute = ParamsPsNonNestedFooBarRouteImport.update({
  id: '/$bar',
  path: '/$bar',
  getParentRoute: () => ParamsPsNonNestedFooRouteRoute,
} as any)
const NonNestedBazBazidEditRoute = NonNestedBazBazidEditRouteImport.update({
  id: '/baz_/$bazid/edit',
  path: '/baz/$bazid/edit',
  getParentRoute: () => NonNestedRouteRoute,
} as any)
const ParamsPsNamedFooBarRouteRoute =
  ParamsPsNamedFooBarRouteRouteImport.update({
    id: '/$bar',
    path: '/$bar',
    getParentRoute: () => ParamsPsNamedFooRouteRoute,
  } as any)
const RelativeUseNavigatePathPathIndexRoute =
  RelativeUseNavigatePathPathIndexRouteImport.update({
    id: '/path/$path/',
    path: '/path/$path/',
    getParentRoute: () => RelativeUseNavigateRouteRoute,
  } as any)
const RelativeUseNavigateNestedDeepIndexRoute =
  RelativeUseNavigateNestedDeepIndexRouteImport.update({
    id: '/nested/deep/',
    path: '/nested/deep/',
    getParentRoute: () => RelativeUseNavigateRouteRoute,
  } as any)
const RelativeLinkPathPathIndexRoute =
  RelativeLinkPathPathIndexRouteImport.update({
    id: '/path/$path/',
    path: '/path/$path/',
    getParentRoute: () => RelativeLinkRouteRoute,
  } as any)
const RelativeLinkNestedDeepIndexRoute =
  RelativeLinkNestedDeepIndexRouteImport.update({
    id: '/nested/deep/',
    path: '/nested/deep/',
    getParentRoute: () => RelativeLinkRouteRoute,
  } as any)
const ParamsPsNamedFooBarBazRoute = ParamsPsNamedFooBarBazRouteImport.update({
  id: '/$baz',
  path: '/$baz',
  getParentRoute: () => ParamsPsNamedFooBarRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof groupLayoutRouteWithChildren
  '/non-nested': typeof NonNestedRouteRouteWithChildren
  '/search-params': typeof SearchParamsRouteRouteWithChildren
  '/anchor': typeof AnchorRoute
  '/component-types-test': typeof ComponentTypesTestRoute
  '/editing-a': typeof EditingARoute
  '/editing-b': typeof EditingBRoute
  '/notRemountDeps': typeof NotRemountDepsRoute
  '/posts': typeof PostsRouteWithChildren
  '/remountDeps': typeof RemountDepsRoute
  '/params-ps/non-nested': typeof ParamsPsNonNestedRouteRouteWithChildren
  '/relative/link': typeof RelativeLinkRouteRouteWithChildren
  '/relative/useNavigate': typeof RelativeUseNavigateRouteRouteWithChildren
  '/onlyrouteinside': typeof anotherGroupOnlyrouteinsideRoute
  '/inside': typeof groupInsideRoute
  '/lazyinside': typeof groupLazyinsideRoute
  '/non-nested/baz': typeof NonNestedBazRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRoute
  '/redirect/$target': typeof RedirectTargetRouteWithChildren
  '/search-params/default': typeof SearchParamsDefaultRoute
  '/params-ps': typeof ParamsPsIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/redirect': typeof RedirectIndexRoute
  '/relative': typeof RelativeIndexRoute
  '/search-params/': typeof SearchParamsIndexRoute
  '/params-ps/named/$foo': typeof ParamsPsNamedFooRouteRouteWithChildren
  '/params-ps/non-nested/$foo': typeof ParamsPsNonNestedFooRouteRouteWithChildren
  '/insidelayout': typeof groupLayoutInsidelayoutRoute
  '/subfolder/inside': typeof groupSubfolderInsideRoute
  '/layout-a': typeof LayoutLayout2LayoutARoute
  '/layout-b': typeof LayoutLayout2LayoutBRoute
  '/non-nested/baz/$bazid': typeof NonNestedBazBazidRoute
  '/params/single/$value': typeof ParamsSingleValueRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
  '/redirect/$target/via-beforeLoad': typeof RedirectTargetViaBeforeLoadRoute
  '/redirect/$target/via-loader': typeof RedirectTargetViaLoaderRoute
  '/redirect/preload/first': typeof RedirectPreloadFirstRoute
  '/redirect/preload/second': typeof RedirectPreloadSecondRoute
  '/redirect/preload/third': typeof RedirectPreloadThirdRoute
  '/relative/link/relative-link-a': typeof RelativeLinkRelativeLinkARoute
  '/relative/link/relative-link-b': typeof RelativeLinkRelativeLinkBRoute
  '/relative/useNavigate/relative-useNavigate-a': typeof RelativeUseNavigateRelativeUseNavigateARoute
  '/relative/useNavigate/relative-useNavigate-b': typeof RelativeUseNavigateRelativeUseNavigateBRoute
  '/redirect/$target/': typeof RedirectTargetIndexRoute
  '/params-ps/named/$foo/$bar': typeof ParamsPsNamedFooBarRouteRouteWithChildren
  '/non-nested/baz/$bazid/edit': typeof NonNestedBazBazidEditRoute
  '/params-ps/non-nested/$foo/$bar': typeof ParamsPsNonNestedFooBarRoute
  '/relative/link/nested': typeof RelativeLinkNestedIndexRoute
  '/relative/link/path': typeof RelativeLinkPathIndexRoute
  '/relative/link/with-search': typeof RelativeLinkWithSearchIndexRoute
  '/relative/useNavigate/nested': typeof RelativeUseNavigateNestedIndexRoute
  '/relative/useNavigate/path': typeof RelativeUseNavigatePathIndexRoute
  '/relative/useNavigate/with-search': typeof RelativeUseNavigateWithSearchIndexRoute
  '/params-ps/named/$foo/$bar/$baz': typeof ParamsPsNamedFooBarBazRoute
  '/relative/link/nested/deep': typeof RelativeLinkNestedDeepIndexRoute
  '/relative/link/path/$path': typeof RelativeLinkPathPathIndexRoute
  '/relative/useNavigate/nested/deep': typeof RelativeUseNavigateNestedDeepIndexRoute
  '/relative/useNavigate/path/$path': typeof RelativeUseNavigatePathPathIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof groupLayoutRouteWithChildren
  '/non-nested': typeof NonNestedRouteRouteWithChildren
  '/anchor': typeof AnchorRoute
  '/component-types-test': typeof ComponentTypesTestRoute
  '/editing-a': typeof EditingARoute
  '/editing-b': typeof EditingBRoute
  '/notRemountDeps': typeof NotRemountDepsRoute
  '/remountDeps': typeof RemountDepsRoute
  '/params-ps/non-nested': typeof ParamsPsNonNestedRouteRouteWithChildren
  '/relative/link': typeof RelativeLinkRouteRouteWithChildren
  '/relative/useNavigate': typeof RelativeUseNavigateRouteRouteWithChildren
  '/onlyrouteinside': typeof anotherGroupOnlyrouteinsideRoute
  '/inside': typeof groupInsideRoute
  '/lazyinside': typeof groupLazyinsideRoute
  '/non-nested/baz': typeof NonNestedBazRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRoute
  '/search-params/default': typeof SearchParamsDefaultRoute
  '/params-ps': typeof ParamsPsIndexRoute
  '/posts': typeof PostsIndexRoute
  '/redirect': typeof RedirectIndexRoute
  '/relative': typeof RelativeIndexRoute
  '/search-params': typeof SearchParamsIndexRoute
  '/params-ps/named/$foo': typeof ParamsPsNamedFooRouteRouteWithChildren
  '/params-ps/non-nested/$foo': typeof ParamsPsNonNestedFooRouteRouteWithChildren
  '/insidelayout': typeof groupLayoutInsidelayoutRoute
  '/subfolder/inside': typeof groupSubfolderInsideRoute
  '/layout-a': typeof LayoutLayout2LayoutARoute
  '/layout-b': typeof LayoutLayout2LayoutBRoute
  '/non-nested/baz/$bazid': typeof NonNestedBazBazidRoute
  '/params/single/$value': typeof ParamsSingleValueRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
  '/redirect/$target/via-beforeLoad': typeof RedirectTargetViaBeforeLoadRoute
  '/redirect/$target/via-loader': typeof RedirectTargetViaLoaderRoute
  '/redirect/preload/first': typeof RedirectPreloadFirstRoute
  '/redirect/preload/second': typeof RedirectPreloadSecondRoute
  '/redirect/preload/third': typeof RedirectPreloadThirdRoute
  '/relative/link/relative-link-a': typeof RelativeLinkRelativeLinkARoute
  '/relative/link/relative-link-b': typeof RelativeLinkRelativeLinkBRoute
  '/relative/useNavigate/relative-useNavigate-a': typeof RelativeUseNavigateRelativeUseNavigateARoute
  '/relative/useNavigate/relative-useNavigate-b': typeof RelativeUseNavigateRelativeUseNavigateBRoute
  '/redirect/$target': typeof RedirectTargetIndexRoute
  '/params-ps/named/$foo/$bar': typeof ParamsPsNamedFooBarRouteRouteWithChildren
  '/non-nested/baz/$bazid/edit': typeof NonNestedBazBazidEditRoute
  '/params-ps/non-nested/$foo/$bar': typeof ParamsPsNonNestedFooBarRoute
  '/relative/link/nested': typeof RelativeLinkNestedIndexRoute
  '/relative/link/path': typeof RelativeLinkPathIndexRoute
  '/relative/link/with-search': typeof RelativeLinkWithSearchIndexRoute
  '/relative/useNavigate/nested': typeof RelativeUseNavigateNestedIndexRoute
  '/relative/useNavigate/path': typeof RelativeUseNavigatePathIndexRoute
  '/relative/useNavigate/with-search': typeof RelativeUseNavigateWithSearchIndexRoute
  '/params-ps/named/$foo/$bar/$baz': typeof ParamsPsNamedFooBarBazRoute
  '/relative/link/nested/deep': typeof RelativeLinkNestedDeepIndexRoute
  '/relative/link/path/$path': typeof RelativeLinkPathPathIndexRoute
  '/relative/useNavigate/nested/deep': typeof RelativeUseNavigateNestedDeepIndexRoute
  '/relative/useNavigate/path/$path': typeof RelativeUseNavigatePathPathIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/non-nested': typeof NonNestedRouteRouteWithChildren
  '/search-params': typeof SearchParamsRouteRouteWithChildren
  '/_layout': typeof LayoutRouteWithChildren
  '/anchor': typeof AnchorRoute
  '/component-types-test': typeof ComponentTypesTestRoute
  '/editing-a': typeof EditingARoute
  '/editing-b': typeof EditingBRoute
  '/notRemountDeps': typeof NotRemountDepsRoute
  '/posts': typeof PostsRouteWithChildren
  '/remountDeps': typeof RemountDepsRoute
  '/params-ps/non-nested': typeof ParamsPsNonNestedRouteRouteWithChildren
  '/relative/link': typeof RelativeLinkRouteRouteWithChildren
  '/relative/useNavigate': typeof RelativeUseNavigateRouteRouteWithChildren
  '/(another-group)/onlyrouteinside': typeof anotherGroupOnlyrouteinsideRoute
  '/(group)': typeof groupRouteWithChildren
  '/(group)/_layout': typeof groupLayoutRouteWithChildren
  '/(group)/inside': typeof groupInsideRoute
  '/(group)/lazyinside': typeof groupLazyinsideRoute
  '/_layout/_layout-2': typeof LayoutLayout2RouteWithChildren
  '/non-nested/baz': typeof NonNestedBazRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRoute
  '/redirect/$target': typeof RedirectTargetRouteWithChildren
  '/search-params/default': typeof SearchParamsDefaultRoute
  '/params-ps/': typeof ParamsPsIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/redirect/': typeof RedirectIndexRoute
  '/relative/': typeof RelativeIndexRoute
  '/search-params/': typeof SearchParamsIndexRoute
  '/params-ps/named/$foo': typeof ParamsPsNamedFooRouteRouteWithChildren
  '/params-ps/non-nested/$foo_': typeof ParamsPsNonNestedFooRouteRouteWithChildren
  '/(group)/_layout/insidelayout': typeof groupLayoutInsidelayoutRoute
  '/(group)/subfolder/inside': typeof groupSubfolderInsideRoute
  '/_layout/_layout-2/layout-a': typeof LayoutLayout2LayoutARoute
  '/_layout/_layout-2/layout-b': typeof LayoutLayout2LayoutBRoute
  '/non-nested/baz/$bazid': typeof NonNestedBazBazidRoute
  '/params/single/$value': typeof ParamsSingleValueRoute
  '/posts_/$postId/edit': typeof PostsPostIdEditRoute
  '/redirect/$target/via-beforeLoad': typeof RedirectTargetViaBeforeLoadRoute
  '/redirect/$target/via-loader': typeof RedirectTargetViaLoaderRoute
  '/redirect/preload/first': typeof RedirectPreloadFirstRoute
  '/redirect/preload/second': typeof RedirectPreloadSecondRoute
  '/redirect/preload/third': typeof RedirectPreloadThirdRoute
  '/relative/link/relative-link-a': typeof RelativeLinkRelativeLinkARoute
  '/relative/link/relative-link-b': typeof RelativeLinkRelativeLinkBRoute
  '/relative/useNavigate/relative-useNavigate-a': typeof RelativeUseNavigateRelativeUseNavigateARoute
  '/relative/useNavigate/relative-useNavigate-b': typeof RelativeUseNavigateRelativeUseNavigateBRoute
  '/redirect/$target/': typeof RedirectTargetIndexRoute
  '/params-ps/named/$foo/$bar': typeof ParamsPsNamedFooBarRouteRouteWithChildren
  '/non-nested/baz_/$bazid/edit': typeof NonNestedBazBazidEditRoute
  '/params-ps/non-nested/$foo_/$bar': typeof ParamsPsNonNestedFooBarRoute
  '/relative/link/nested/': typeof RelativeLinkNestedIndexRoute
  '/relative/link/path/': typeof RelativeLinkPathIndexRoute
  '/relative/link/with-search/': typeof RelativeLinkWithSearchIndexRoute
  '/relative/useNavigate/nested/': typeof RelativeUseNavigateNestedIndexRoute
  '/relative/useNavigate/path/': typeof RelativeUseNavigatePathIndexRoute
  '/relative/useNavigate/with-search/': typeof RelativeUseNavigateWithSearchIndexRoute
  '/params-ps/named/$foo/$bar/$baz': typeof ParamsPsNamedFooBarBazRoute
  '/relative/link/nested/deep/': typeof RelativeLinkNestedDeepIndexRoute
  '/relative/link/path/$path/': typeof RelativeLinkPathPathIndexRoute
  '/relative/useNavigate/nested/deep/': typeof RelativeUseNavigateNestedDeepIndexRoute
  '/relative/useNavigate/path/$path/': typeof RelativeUseNavigatePathPathIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/non-nested'
    | '/search-params'
    | '/anchor'
    | '/component-types-test'
    | '/editing-a'
    | '/editing-b'
    | '/notRemountDeps'
    | '/posts'
    | '/remountDeps'
    | '/params-ps/non-nested'
    | '/relative/link'
    | '/relative/useNavigate'
    | '/onlyrouteinside'
    | '/inside'
    | '/lazyinside'
    | '/non-nested/baz'
    | '/posts/$postId'
    | '/redirect/$target'
    | '/search-params/default'
    | '/params-ps'
    | '/posts/'
    | '/redirect'
    | '/relative'
    | '/search-params/'
    | '/params-ps/named/$foo'
    | '/params-ps/non-nested/$foo'
    | '/insidelayout'
    | '/subfolder/inside'
    | '/layout-a'
    | '/layout-b'
    | '/non-nested/baz/$bazid'
    | '/params/single/$value'
    | '/posts/$postId/edit'
    | '/redirect/$target/via-beforeLoad'
    | '/redirect/$target/via-loader'
    | '/redirect/preload/first'
    | '/redirect/preload/second'
    | '/redirect/preload/third'
    | '/relative/link/relative-link-a'
    | '/relative/link/relative-link-b'
    | '/relative/useNavigate/relative-useNavigate-a'
    | '/relative/useNavigate/relative-useNavigate-b'
    | '/redirect/$target/'
    | '/params-ps/named/$foo/$bar'
    | '/non-nested/baz/$bazid/edit'
    | '/params-ps/non-nested/$foo/$bar'
    | '/relative/link/nested'
    | '/relative/link/path'
    | '/relative/link/with-search'
    | '/relative/useNavigate/nested'
    | '/relative/useNavigate/path'
    | '/relative/useNavigate/with-search'
    | '/params-ps/named/$foo/$bar/$baz'
    | '/relative/link/nested/deep'
    | '/relative/link/path/$path'
    | '/relative/useNavigate/nested/deep'
    | '/relative/useNavigate/path/$path'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/non-nested'
    | '/anchor'
    | '/component-types-test'
    | '/editing-a'
    | '/editing-b'
    | '/notRemountDeps'
    | '/remountDeps'
    | '/params-ps/non-nested'
    | '/relative/link'
    | '/relative/useNavigate'
    | '/onlyrouteinside'
    | '/inside'
    | '/lazyinside'
    | '/non-nested/baz'
    | '/posts/$postId'
    | '/search-params/default'
    | '/params-ps'
    | '/posts'
    | '/redirect'
    | '/relative'
    | '/search-params'
    | '/params-ps/named/$foo'
    | '/params-ps/non-nested/$foo'
    | '/insidelayout'
    | '/subfolder/inside'
    | '/layout-a'
    | '/layout-b'
    | '/non-nested/baz/$bazid'
    | '/params/single/$value'
    | '/posts/$postId/edit'
    | '/redirect/$target/via-beforeLoad'
    | '/redirect/$target/via-loader'
    | '/redirect/preload/first'
    | '/redirect/preload/second'
    | '/redirect/preload/third'
    | '/relative/link/relative-link-a'
    | '/relative/link/relative-link-b'
    | '/relative/useNavigate/relative-useNavigate-a'
    | '/relative/useNavigate/relative-useNavigate-b'
    | '/redirect/$target'
    | '/params-ps/named/$foo/$bar'
    | '/non-nested/baz/$bazid/edit'
    | '/params-ps/non-nested/$foo/$bar'
    | '/relative/link/nested'
    | '/relative/link/path'
    | '/relative/link/with-search'
    | '/relative/useNavigate/nested'
    | '/relative/useNavigate/path'
    | '/relative/useNavigate/with-search'
    | '/params-ps/named/$foo/$bar/$baz'
    | '/relative/link/nested/deep'
    | '/relative/link/path/$path'
    | '/relative/useNavigate/nested/deep'
    | '/relative/useNavigate/path/$path'
  id:
    | '__root__'
    | '/'
    | '/non-nested'
    | '/search-params'
    | '/_layout'
    | '/anchor'
    | '/component-types-test'
    | '/editing-a'
    | '/editing-b'
    | '/notRemountDeps'
    | '/posts'
    | '/remountDeps'
    | '/params-ps/non-nested'
    | '/relative/link'
    | '/relative/useNavigate'
    | '/(another-group)/onlyrouteinside'
    | '/(group)'
    | '/(group)/_layout'
    | '/(group)/inside'
    | '/(group)/lazyinside'
    | '/_layout/_layout-2'
    | '/non-nested/baz'
    | '/posts/$postId'
    | '/redirect/$target'
    | '/search-params/default'
    | '/params-ps/'
    | '/posts/'
    | '/redirect/'
    | '/relative/'
    | '/search-params/'
    | '/params-ps/named/$foo'
    | '/params-ps/non-nested/$foo_'
    | '/(group)/_layout/insidelayout'
    | '/(group)/subfolder/inside'
    | '/_layout/_layout-2/layout-a'
    | '/_layout/_layout-2/layout-b'
    | '/non-nested/baz/$bazid'
    | '/params/single/$value'
    | '/posts_/$postId/edit'
    | '/redirect/$target/via-beforeLoad'
    | '/redirect/$target/via-loader'
    | '/redirect/preload/first'
    | '/redirect/preload/second'
    | '/redirect/preload/third'
    | '/relative/link/relative-link-a'
    | '/relative/link/relative-link-b'
    | '/relative/useNavigate/relative-useNavigate-a'
    | '/relative/useNavigate/relative-useNavigate-b'
    | '/redirect/$target/'
    | '/params-ps/named/$foo/$bar'
    | '/non-nested/baz_/$bazid/edit'
    | '/params-ps/non-nested/$foo_/$bar'
    | '/relative/link/nested/'
    | '/relative/link/path/'
    | '/relative/link/with-search/'
    | '/relative/useNavigate/nested/'
    | '/relative/useNavigate/path/'
    | '/relative/useNavigate/with-search/'
    | '/params-ps/named/$foo/$bar/$baz'
    | '/relative/link/nested/deep/'
    | '/relative/link/path/$path/'
    | '/relative/useNavigate/nested/deep/'
    | '/relative/useNavigate/path/$path/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NonNestedRouteRoute: typeof NonNestedRouteRouteWithChildren
  SearchParamsRouteRoute: typeof SearchParamsRouteRouteWithChildren
  LayoutRoute: typeof LayoutRouteWithChildren
  AnchorRoute: typeof AnchorRoute
  ComponentTypesTestRoute: typeof ComponentTypesTestRoute
  EditingARoute: typeof EditingARoute
  EditingBRoute: typeof EditingBRoute
  NotRemountDepsRoute: typeof NotRemountDepsRoute
  PostsRoute: typeof PostsRouteWithChildren
  RemountDepsRoute: typeof RemountDepsRoute
  ParamsPsNonNestedRouteRoute: typeof ParamsPsNonNestedRouteRouteWithChildren
  RelativeLinkRouteRoute: typeof RelativeLinkRouteRouteWithChildren
  RelativeUseNavigateRouteRoute: typeof RelativeUseNavigateRouteRouteWithChildren
  anotherGroupOnlyrouteinsideRoute: typeof anotherGroupOnlyrouteinsideRoute
  groupRoute: typeof groupRouteWithChildren
  RedirectTargetRoute: typeof RedirectTargetRouteWithChildren
  ParamsPsIndexRoute: typeof ParamsPsIndexRoute
  RedirectIndexRoute: typeof RedirectIndexRoute
  RelativeIndexRoute: typeof RelativeIndexRoute
  ParamsPsNamedFooRouteRoute: typeof ParamsPsNamedFooRouteRouteWithChildren
  ParamsSingleValueRoute: typeof ParamsSingleValueRoute
  PostsPostIdEditRoute: typeof PostsPostIdEditRoute
  RedirectPreloadFirstRoute: typeof RedirectPreloadFirstRoute
  RedirectPreloadSecondRoute: typeof RedirectPreloadSecondRoute
  RedirectPreloadThirdRoute: typeof RedirectPreloadThirdRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/(group)': {
      id: '/(group)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof groupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/remountDeps': {
      id: '/remountDeps'
      path: '/remountDeps'
      fullPath: '/remountDeps'
      preLoaderRoute: typeof RemountDepsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notRemountDeps': {
      id: '/notRemountDeps'
      path: '/notRemountDeps'
      fullPath: '/notRemountDeps'
      preLoaderRoute: typeof NotRemountDepsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/editing-b': {
      id: '/editing-b'
      path: '/editing-b'
      fullPath: '/editing-b'
      preLoaderRoute: typeof EditingBRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/editing-a': {
      id: '/editing-a'
      path: '/editing-a'
      fullPath: '/editing-a'
      preLoaderRoute: typeof EditingARouteImport
      parentRoute: typeof rootRouteImport
    }
    '/component-types-test': {
      id: '/component-types-test'
      path: '/component-types-test'
      fullPath: '/component-types-test'
      preLoaderRoute: typeof ComponentTypesTestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/anchor': {
      id: '/anchor'
      path: '/anchor'
      fullPath: '/anchor'
      preLoaderRoute: typeof AnchorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search-params': {
      id: '/search-params'
      path: '/search-params'
      fullPath: '/search-params'
      preLoaderRoute: typeof SearchParamsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/non-nested': {
      id: '/non-nested'
      path: '/non-nested'
      fullPath: '/non-nested'
      preLoaderRoute: typeof NonNestedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search-params/': {
      id: '/search-params/'
      path: '/'
      fullPath: '/search-params/'
      preLoaderRoute: typeof SearchParamsIndexRouteImport
      parentRoute: typeof SearchParamsRouteRoute
    }
    '/relative/': {
      id: '/relative/'
      path: '/relative'
      fullPath: '/relative'
      preLoaderRoute: typeof RelativeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/redirect/': {
      id: '/redirect/'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof PostsRoute
    }
    '/params-ps/': {
      id: '/params-ps/'
      path: '/params-ps'
      fullPath: '/params-ps'
      preLoaderRoute: typeof ParamsPsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search-params/default': {
      id: '/search-params/default'
      path: '/default'
      fullPath: '/search-params/default'
      preLoaderRoute: typeof SearchParamsDefaultRouteImport
      parentRoute: typeof SearchParamsRouteRoute
    }
    '/redirect/$target': {
      id: '/redirect/$target'
      path: '/redirect/$target'
      fullPath: '/redirect/$target'
      preLoaderRoute: typeof RedirectTargetRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdRouteImport
      parentRoute: typeof PostsRoute
    }
    '/non-nested/baz': {
      id: '/non-nested/baz'
      path: '/baz'
      fullPath: '/non-nested/baz'
      preLoaderRoute: typeof NonNestedBazRouteImport
      parentRoute: typeof NonNestedRouteRoute
    }
    '/_layout/_layout-2': {
      id: '/_layout/_layout-2'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutLayout2RouteImport
      parentRoute: typeof LayoutRoute
    }
    '/(group)/lazyinside': {
      id: '/(group)/lazyinside'
      path: '/lazyinside'
      fullPath: '/lazyinside'
      preLoaderRoute: typeof groupLazyinsideRouteImport
      parentRoute: typeof groupRoute
    }
    '/(group)/inside': {
      id: '/(group)/inside'
      path: '/inside'
      fullPath: '/inside'
      preLoaderRoute: typeof groupInsideRouteImport
      parentRoute: typeof groupRoute
    }
    '/(group)/_layout': {
      id: '/(group)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof groupLayoutRouteImport
      parentRoute: typeof groupRoute
    }
    '/(another-group)/onlyrouteinside': {
      id: '/(another-group)/onlyrouteinside'
      path: '/onlyrouteinside'
      fullPath: '/onlyrouteinside'
      preLoaderRoute: typeof anotherGroupOnlyrouteinsideRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/relative/useNavigate': {
      id: '/relative/useNavigate'
      path: '/relative/useNavigate'
      fullPath: '/relative/useNavigate'
      preLoaderRoute: typeof RelativeUseNavigateRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/relative/link': {
      id: '/relative/link'
      path: '/relative/link'
      fullPath: '/relative/link'
      preLoaderRoute: typeof RelativeLinkRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/params-ps/non-nested': {
      id: '/params-ps/non-nested'
      path: '/params-ps/non-nested'
      fullPath: '/params-ps/non-nested'
      preLoaderRoute: typeof ParamsPsNonNestedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/redirect/$target/': {
      id: '/redirect/$target/'
      path: '/'
      fullPath: '/redirect/$target/'
      preLoaderRoute: typeof RedirectTargetIndexRouteImport
      parentRoute: typeof RedirectTargetRoute
    }
    '/relative/useNavigate/relative-useNavigate-b': {
      id: '/relative/useNavigate/relative-useNavigate-b'
      path: '/relative-useNavigate-b'
      fullPath: '/relative/useNavigate/relative-useNavigate-b'
      preLoaderRoute: typeof RelativeUseNavigateRelativeUseNavigateBRouteImport
      parentRoute: typeof RelativeUseNavigateRouteRoute
    }
    '/relative/useNavigate/relative-useNavigate-a': {
      id: '/relative/useNavigate/relative-useNavigate-a'
      path: '/relative-useNavigate-a'
      fullPath: '/relative/useNavigate/relative-useNavigate-a'
      preLoaderRoute: typeof RelativeUseNavigateRelativeUseNavigateARouteImport
      parentRoute: typeof RelativeUseNavigateRouteRoute
    }
    '/relative/link/relative-link-b': {
      id: '/relative/link/relative-link-b'
      path: '/relative-link-b'
      fullPath: '/relative/link/relative-link-b'
      preLoaderRoute: typeof RelativeLinkRelativeLinkBRouteImport
      parentRoute: typeof RelativeLinkRouteRoute
    }
    '/relative/link/relative-link-a': {
      id: '/relative/link/relative-link-a'
      path: '/relative-link-a'
      fullPath: '/relative/link/relative-link-a'
      preLoaderRoute: typeof RelativeLinkRelativeLinkARouteImport
      parentRoute: typeof RelativeLinkRouteRoute
    }
    '/redirect/preload/third': {
      id: '/redirect/preload/third'
      path: '/redirect/preload/third'
      fullPath: '/redirect/preload/third'
      preLoaderRoute: typeof RedirectPreloadThirdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/redirect/preload/second': {
      id: '/redirect/preload/second'
      path: '/redirect/preload/second'
      fullPath: '/redirect/preload/second'
      preLoaderRoute: typeof RedirectPreloadSecondRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/redirect/preload/first': {
      id: '/redirect/preload/first'
      path: '/redirect/preload/first'
      fullPath: '/redirect/preload/first'
      preLoaderRoute: typeof RedirectPreloadFirstRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/redirect/$target/via-loader': {
      id: '/redirect/$target/via-loader'
      path: '/via-loader'
      fullPath: '/redirect/$target/via-loader'
      preLoaderRoute: typeof RedirectTargetViaLoaderRouteImport
      parentRoute: typeof RedirectTargetRoute
    }
    '/redirect/$target/via-beforeLoad': {
      id: '/redirect/$target/via-beforeLoad'
      path: '/via-beforeLoad'
      fullPath: '/redirect/$target/via-beforeLoad'
      preLoaderRoute: typeof RedirectTargetViaBeforeLoadRouteImport
      parentRoute: typeof RedirectTargetRoute
    }
    '/posts_/$postId/edit': {
      id: '/posts_/$postId/edit'
      path: '/posts/$postId/edit'
      fullPath: '/posts/$postId/edit'
      preLoaderRoute: typeof PostsPostIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/params/single/$value': {
      id: '/params/single/$value'
      path: '/params/single/$value'
      fullPath: '/params/single/$value'
      preLoaderRoute: typeof ParamsSingleValueRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/non-nested/baz/$bazid': {
      id: '/non-nested/baz/$bazid'
      path: '/$bazid'
      fullPath: '/non-nested/baz/$bazid'
      preLoaderRoute: typeof NonNestedBazBazidRouteImport
      parentRoute: typeof NonNestedBazRoute
    }
    '/_layout/_layout-2/layout-b': {
      id: '/_layout/_layout-2/layout-b'
      path: '/layout-b'
      fullPath: '/layout-b'
      preLoaderRoute: typeof LayoutLayout2LayoutBRouteImport
      parentRoute: typeof LayoutLayout2Route
    }
    '/_layout/_layout-2/layout-a': {
      id: '/_layout/_layout-2/layout-a'
      path: '/layout-a'
      fullPath: '/layout-a'
      preLoaderRoute: typeof LayoutLayout2LayoutARouteImport
      parentRoute: typeof LayoutLayout2Route
    }
    '/(group)/subfolder/inside': {
      id: '/(group)/subfolder/inside'
      path: '/subfolder/inside'
      fullPath: '/subfolder/inside'
      preLoaderRoute: typeof groupSubfolderInsideRouteImport
      parentRoute: typeof groupRoute
    }
    '/(group)/_layout/insidelayout': {
      id: '/(group)/_layout/insidelayout'
      path: '/insidelayout'
      fullPath: '/insidelayout'
      preLoaderRoute: typeof groupLayoutInsidelayoutRouteImport
      parentRoute: typeof groupLayoutRoute
    }
    '/params-ps/non-nested/$foo_': {
      id: '/params-ps/non-nested/$foo_'
      path: '/$foo'
      fullPath: '/params-ps/non-nested/$foo'
      preLoaderRoute: typeof ParamsPsNonNestedFooRouteRouteImport
      parentRoute: typeof ParamsPsNonNestedRouteRoute
    }
    '/params-ps/named/$foo': {
      id: '/params-ps/named/$foo'
      path: '/params-ps/named/$foo'
      fullPath: '/params-ps/named/$foo'
      preLoaderRoute: typeof ParamsPsNamedFooRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/relative/useNavigate/with-search/': {
      id: '/relative/useNavigate/with-search/'
      path: '/with-search'
      fullPath: '/relative/useNavigate/with-search'
      preLoaderRoute: typeof RelativeUseNavigateWithSearchIndexRouteImport
      parentRoute: typeof RelativeUseNavigateRouteRoute
    }
    '/relative/useNavigate/path/': {
      id: '/relative/useNavigate/path/'
      path: '/path'
      fullPath: '/relative/useNavigate/path'
      preLoaderRoute: typeof RelativeUseNavigatePathIndexRouteImport
      parentRoute: typeof RelativeUseNavigateRouteRoute
    }
    '/relative/useNavigate/nested/': {
      id: '/relative/useNavigate/nested/'
      path: '/nested'
      fullPath: '/relative/useNavigate/nested'
      preLoaderRoute: typeof RelativeUseNavigateNestedIndexRouteImport
      parentRoute: typeof RelativeUseNavigateRouteRoute
    }
    '/relative/link/with-search/': {
      id: '/relative/link/with-search/'
      path: '/with-search'
      fullPath: '/relative/link/with-search'
      preLoaderRoute: typeof RelativeLinkWithSearchIndexRouteImport
      parentRoute: typeof RelativeLinkRouteRoute
    }
    '/relative/link/path/': {
      id: '/relative/link/path/'
      path: '/path'
      fullPath: '/relative/link/path'
      preLoaderRoute: typeof RelativeLinkPathIndexRouteImport
      parentRoute: typeof RelativeLinkRouteRoute
    }
    '/relative/link/nested/': {
      id: '/relative/link/nested/'
      path: '/nested'
      fullPath: '/relative/link/nested'
      preLoaderRoute: typeof RelativeLinkNestedIndexRouteImport
      parentRoute: typeof RelativeLinkRouteRoute
    }
    '/params-ps/non-nested/$foo_/$bar': {
      id: '/params-ps/non-nested/$foo_/$bar'
      path: '/$bar'
      fullPath: '/params-ps/non-nested/$foo/$bar'
      preLoaderRoute: typeof ParamsPsNonNestedFooBarRouteImport
      parentRoute: typeof ParamsPsNonNestedFooRouteRoute
    }
    '/non-nested/baz_/$bazid/edit': {
      id: '/non-nested/baz_/$bazid/edit'
      path: '/baz/$bazid/edit'
      fullPath: '/non-nested/baz/$bazid/edit'
      preLoaderRoute: typeof NonNestedBazBazidEditRouteImport
      parentRoute: typeof NonNestedRouteRoute
    }
    '/params-ps/named/$foo/$bar': {
      id: '/params-ps/named/$foo/$bar'
      path: '/$bar'
      fullPath: '/params-ps/named/$foo/$bar'
      preLoaderRoute: typeof ParamsPsNamedFooBarRouteRouteImport
      parentRoute: typeof ParamsPsNamedFooRouteRoute
    }
    '/relative/useNavigate/path/$path/': {
      id: '/relative/useNavigate/path/$path/'
      path: '/path/$path'
      fullPath: '/relative/useNavigate/path/$path'
      preLoaderRoute: typeof RelativeUseNavigatePathPathIndexRouteImport
      parentRoute: typeof RelativeUseNavigateRouteRoute
    }
    '/relative/useNavigate/nested/deep/': {
      id: '/relative/useNavigate/nested/deep/'
      path: '/nested/deep'
      fullPath: '/relative/useNavigate/nested/deep'
      preLoaderRoute: typeof RelativeUseNavigateNestedDeepIndexRouteImport
      parentRoute: typeof RelativeUseNavigateRouteRoute
    }
    '/relative/link/path/$path/': {
      id: '/relative/link/path/$path/'
      path: '/path/$path'
      fullPath: '/relative/link/path/$path'
      preLoaderRoute: typeof RelativeLinkPathPathIndexRouteImport
      parentRoute: typeof RelativeLinkRouteRoute
    }
    '/relative/link/nested/deep/': {
      id: '/relative/link/nested/deep/'
      path: '/nested/deep'
      fullPath: '/relative/link/nested/deep'
      preLoaderRoute: typeof RelativeLinkNestedDeepIndexRouteImport
      parentRoute: typeof RelativeLinkRouteRoute
    }
    '/params-ps/named/$foo/$bar/$baz': {
      id: '/params-ps/named/$foo/$bar/$baz'
      path: '/$baz'
      fullPath: '/params-ps/named/$foo/$bar/$baz'
      preLoaderRoute: typeof ParamsPsNamedFooBarBazRouteImport
      parentRoute: typeof ParamsPsNamedFooBarRouteRoute
    }
  }
}

interface NonNestedBazRouteChildren {
  NonNestedBazBazidRoute: typeof NonNestedBazBazidRoute
}

const NonNestedBazRouteChildren: NonNestedBazRouteChildren = {
  NonNestedBazBazidRoute: NonNestedBazBazidRoute,
}

const NonNestedBazRouteWithChildren = NonNestedBazRoute._addFileChildren(
  NonNestedBazRouteChildren,
)

interface NonNestedRouteRouteChildren {
  NonNestedBazRoute: typeof NonNestedBazRouteWithChildren
  NonNestedBazBazidEditRoute: typeof NonNestedBazBazidEditRoute
}

const NonNestedRouteRouteChildren: NonNestedRouteRouteChildren = {
  NonNestedBazRoute: NonNestedBazRouteWithChildren,
  NonNestedBazBazidEditRoute: NonNestedBazBazidEditRoute,
}

const NonNestedRouteRouteWithChildren = NonNestedRouteRoute._addFileChildren(
  NonNestedRouteRouteChildren,
)

interface SearchParamsRouteRouteChildren {
  SearchParamsDefaultRoute: typeof SearchParamsDefaultRoute
  SearchParamsIndexRoute: typeof SearchParamsIndexRoute
}

const SearchParamsRouteRouteChildren: SearchParamsRouteRouteChildren = {
  SearchParamsDefaultRoute: SearchParamsDefaultRoute,
  SearchParamsIndexRoute: SearchParamsIndexRoute,
}

const SearchParamsRouteRouteWithChildren =
  SearchParamsRouteRoute._addFileChildren(SearchParamsRouteRouteChildren)

interface LayoutLayout2RouteChildren {
  LayoutLayout2LayoutARoute: typeof LayoutLayout2LayoutARoute
  LayoutLayout2LayoutBRoute: typeof LayoutLayout2LayoutBRoute
}

const LayoutLayout2RouteChildren: LayoutLayout2RouteChildren = {
  LayoutLayout2LayoutARoute: LayoutLayout2LayoutARoute,
  LayoutLayout2LayoutBRoute: LayoutLayout2LayoutBRoute,
}

const LayoutLayout2RouteWithChildren = LayoutLayout2Route._addFileChildren(
  LayoutLayout2RouteChildren,
)

interface LayoutRouteChildren {
  LayoutLayout2Route: typeof LayoutLayout2RouteWithChildren
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutLayout2Route: LayoutLayout2RouteWithChildren,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

interface ParamsPsNonNestedFooRouteRouteChildren {
  ParamsPsNonNestedFooBarRoute: typeof ParamsPsNonNestedFooBarRoute
}

const ParamsPsNonNestedFooRouteRouteChildren: ParamsPsNonNestedFooRouteRouteChildren =
  {
    ParamsPsNonNestedFooBarRoute: ParamsPsNonNestedFooBarRoute,
  }

const ParamsPsNonNestedFooRouteRouteWithChildren =
  ParamsPsNonNestedFooRouteRoute._addFileChildren(
    ParamsPsNonNestedFooRouteRouteChildren,
  )

interface ParamsPsNonNestedRouteRouteChildren {
  ParamsPsNonNestedFooRouteRoute: typeof ParamsPsNonNestedFooRouteRouteWithChildren
}

const ParamsPsNonNestedRouteRouteChildren: ParamsPsNonNestedRouteRouteChildren =
  {
    ParamsPsNonNestedFooRouteRoute: ParamsPsNonNestedFooRouteRouteWithChildren,
  }

const ParamsPsNonNestedRouteRouteWithChildren =
  ParamsPsNonNestedRouteRoute._addFileChildren(
    ParamsPsNonNestedRouteRouteChildren,
  )

interface RelativeLinkRouteRouteChildren {
  RelativeLinkRelativeLinkARoute: typeof RelativeLinkRelativeLinkARoute
  RelativeLinkRelativeLinkBRoute: typeof RelativeLinkRelativeLinkBRoute
  RelativeLinkNestedIndexRoute: typeof RelativeLinkNestedIndexRoute
  RelativeLinkPathIndexRoute: typeof RelativeLinkPathIndexRoute
  RelativeLinkWithSearchIndexRoute: typeof RelativeLinkWithSearchIndexRoute
  RelativeLinkNestedDeepIndexRoute: typeof RelativeLinkNestedDeepIndexRoute
  RelativeLinkPathPathIndexRoute: typeof RelativeLinkPathPathIndexRoute
}

const RelativeLinkRouteRouteChildren: RelativeLinkRouteRouteChildren = {
  RelativeLinkRelativeLinkARoute: RelativeLinkRelativeLinkARoute,
  RelativeLinkRelativeLinkBRoute: RelativeLinkRelativeLinkBRoute,
  RelativeLinkNestedIndexRoute: RelativeLinkNestedIndexRoute,
  RelativeLinkPathIndexRoute: RelativeLinkPathIndexRoute,
  RelativeLinkWithSearchIndexRoute: RelativeLinkWithSearchIndexRoute,
  RelativeLinkNestedDeepIndexRoute: RelativeLinkNestedDeepIndexRoute,
  RelativeLinkPathPathIndexRoute: RelativeLinkPathPathIndexRoute,
}

const RelativeLinkRouteRouteWithChildren =
  RelativeLinkRouteRoute._addFileChildren(RelativeLinkRouteRouteChildren)

interface RelativeUseNavigateRouteRouteChildren {
  RelativeUseNavigateRelativeUseNavigateARoute: typeof RelativeUseNavigateRelativeUseNavigateARoute
  RelativeUseNavigateRelativeUseNavigateBRoute: typeof RelativeUseNavigateRelativeUseNavigateBRoute
  RelativeUseNavigateNestedIndexRoute: typeof RelativeUseNavigateNestedIndexRoute
  RelativeUseNavigatePathIndexRoute: typeof RelativeUseNavigatePathIndexRoute
  RelativeUseNavigateWithSearchIndexRoute: typeof RelativeUseNavigateWithSearchIndexRoute
  RelativeUseNavigateNestedDeepIndexRoute: typeof RelativeUseNavigateNestedDeepIndexRoute
  RelativeUseNavigatePathPathIndexRoute: typeof RelativeUseNavigatePathPathIndexRoute
}

const RelativeUseNavigateRouteRouteChildren: RelativeUseNavigateRouteRouteChildren =
  {
    RelativeUseNavigateRelativeUseNavigateARoute:
      RelativeUseNavigateRelativeUseNavigateARoute,
    RelativeUseNavigateRelativeUseNavigateBRoute:
      RelativeUseNavigateRelativeUseNavigateBRoute,
    RelativeUseNavigateNestedIndexRoute: RelativeUseNavigateNestedIndexRoute,
    RelativeUseNavigatePathIndexRoute: RelativeUseNavigatePathIndexRoute,
    RelativeUseNavigateWithSearchIndexRoute:
      RelativeUseNavigateWithSearchIndexRoute,
    RelativeUseNavigateNestedDeepIndexRoute:
      RelativeUseNavigateNestedDeepIndexRoute,
    RelativeUseNavigatePathPathIndexRoute:
      RelativeUseNavigatePathPathIndexRoute,
  }

const RelativeUseNavigateRouteRouteWithChildren =
  RelativeUseNavigateRouteRoute._addFileChildren(
    RelativeUseNavigateRouteRouteChildren,
  )

interface groupLayoutRouteChildren {
  groupLayoutInsidelayoutRoute: typeof groupLayoutInsidelayoutRoute
}

const groupLayoutRouteChildren: groupLayoutRouteChildren = {
  groupLayoutInsidelayoutRoute: groupLayoutInsidelayoutRoute,
}

const groupLayoutRouteWithChildren = groupLayoutRoute._addFileChildren(
  groupLayoutRouteChildren,
)

interface groupRouteChildren {
  groupLayoutRoute: typeof groupLayoutRouteWithChildren
  groupInsideRoute: typeof groupInsideRoute
  groupLazyinsideRoute: typeof groupLazyinsideRoute
  groupSubfolderInsideRoute: typeof groupSubfolderInsideRoute
}

const groupRouteChildren: groupRouteChildren = {
  groupLayoutRoute: groupLayoutRouteWithChildren,
  groupInsideRoute: groupInsideRoute,
  groupLazyinsideRoute: groupLazyinsideRoute,
  groupSubfolderInsideRoute: groupSubfolderInsideRoute,
}

const groupRouteWithChildren = groupRoute._addFileChildren(groupRouteChildren)

interface RedirectTargetRouteChildren {
  RedirectTargetViaBeforeLoadRoute: typeof RedirectTargetViaBeforeLoadRoute
  RedirectTargetViaLoaderRoute: typeof RedirectTargetViaLoaderRoute
  RedirectTargetIndexRoute: typeof RedirectTargetIndexRoute
}

const RedirectTargetRouteChildren: RedirectTargetRouteChildren = {
  RedirectTargetViaBeforeLoadRoute: RedirectTargetViaBeforeLoadRoute,
  RedirectTargetViaLoaderRoute: RedirectTargetViaLoaderRoute,
  RedirectTargetIndexRoute: RedirectTargetIndexRoute,
}

const RedirectTargetRouteWithChildren = RedirectTargetRoute._addFileChildren(
  RedirectTargetRouteChildren,
)

interface ParamsPsNamedFooBarRouteRouteChildren {
  ParamsPsNamedFooBarBazRoute: typeof ParamsPsNamedFooBarBazRoute
}

const ParamsPsNamedFooBarRouteRouteChildren: ParamsPsNamedFooBarRouteRouteChildren =
  {
    ParamsPsNamedFooBarBazRoute: ParamsPsNamedFooBarBazRoute,
  }

const ParamsPsNamedFooBarRouteRouteWithChildren =
  ParamsPsNamedFooBarRouteRoute._addFileChildren(
    ParamsPsNamedFooBarRouteRouteChildren,
  )

interface ParamsPsNamedFooRouteRouteChildren {
  ParamsPsNamedFooBarRouteRoute: typeof ParamsPsNamedFooBarRouteRouteWithChildren
}

const ParamsPsNamedFooRouteRouteChildren: ParamsPsNamedFooRouteRouteChildren = {
  ParamsPsNamedFooBarRouteRoute: ParamsPsNamedFooBarRouteRouteWithChildren,
}

const ParamsPsNamedFooRouteRouteWithChildren =
  ParamsPsNamedFooRouteRoute._addFileChildren(
    ParamsPsNamedFooRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NonNestedRouteRoute: NonNestedRouteRouteWithChildren,
  SearchParamsRouteRoute: SearchParamsRouteRouteWithChildren,
  LayoutRoute: LayoutRouteWithChildren,
  AnchorRoute: AnchorRoute,
  ComponentTypesTestRoute: ComponentTypesTestRoute,
  EditingARoute: EditingARoute,
  EditingBRoute: EditingBRoute,
  NotRemountDepsRoute: NotRemountDepsRoute,
  PostsRoute: PostsRouteWithChildren,
  RemountDepsRoute: RemountDepsRoute,
  ParamsPsNonNestedRouteRoute: ParamsPsNonNestedRouteRouteWithChildren,
  RelativeLinkRouteRoute: RelativeLinkRouteRouteWithChildren,
  RelativeUseNavigateRouteRoute: RelativeUseNavigateRouteRouteWithChildren,
  anotherGroupOnlyrouteinsideRoute: anotherGroupOnlyrouteinsideRoute,
  groupRoute: groupRouteWithChildren,
  RedirectTargetRoute: RedirectTargetRouteWithChildren,
  ParamsPsIndexRoute: ParamsPsIndexRoute,
  RedirectIndexRoute: RedirectIndexRoute,
  RelativeIndexRoute: RelativeIndexRoute,
  ParamsPsNamedFooRouteRoute: ParamsPsNamedFooRouteRouteWithChildren,
  ParamsSingleValueRoute: ParamsSingleValueRoute,
  PostsPostIdEditRoute: PostsPostIdEditRoute,
  RedirectPreloadFirstRoute: RedirectPreloadFirstRoute,
  RedirectPreloadSecondRoute: RedirectPreloadSecondRoute,
  RedirectPreloadThirdRoute: RedirectPreloadThirdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
