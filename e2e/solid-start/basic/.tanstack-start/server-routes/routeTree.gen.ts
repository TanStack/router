/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import type {
  FileRoutesByPath,
  CreateServerFileRoute,
} from '@tanstack/solid-start/server'
import {
  createServerRoute,
  createServerFileRoute,
} from '@tanstack/solid-start/server'

import { ServerRoute as ApiUsersRouteImport } from './../../src/routes/api/users'
import { ServerRoute as ApiUsersUserIdRouteImport } from './../../src/routes/api/users.$userId'

// Create/Update Routes

const rootRoute = createServerRoute()

const ApiUsersRoute = ApiUsersRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootRoute,
} as any)

const ApiUsersUserIdRoute = ApiUsersUserIdRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => ApiUsersRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/solid-start/server' {
  interface FileRoutesByPath {
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersRouteImport
      parentRoute: typeof rootRoute
    }
    '/api/users/$userId': {
      id: '/api/users/$userId'
      path: '/$userId'
      fullPath: '/api/users/$userId'
      preLoaderRoute: typeof ApiUsersUserIdRouteImport
      parentRoute: typeof ApiUsersRouteImport
    }
  }
}

// Add type-safety to the createFileRoute function across the route tree

declare module './../../src/routes/api/users' {
  const createServerFileRoute: CreateServerFileRoute<
    FileRoutesByPath['/api/users']['parentRoute'],
    FileRoutesByPath['/api/users']['id'],
    FileRoutesByPath['/api/users']['path'],
    FileRoutesByPath['/api/users']['fullPath'],
    ApiUsersRouteChildren
  >
}
declare module './../../src/routes/api/users.$userId' {
  const createServerFileRoute: CreateServerFileRoute<
    FileRoutesByPath['/api/users/$userId']['parentRoute'],
    FileRoutesByPath['/api/users/$userId']['id'],
    FileRoutesByPath['/api/users/$userId']['path'],
    FileRoutesByPath['/api/users/$userId']['fullPath'],
    unknown
  >
}

// Create and export the route tree

interface ApiUsersRouteChildren {
  ApiUsersUserIdRoute: typeof ApiUsersUserIdRoute
}

const ApiUsersRouteChildren: ApiUsersRouteChildren = {
  ApiUsersUserIdRoute: ApiUsersUserIdRoute,
}

const ApiUsersRouteWithChildren = ApiUsersRoute._addFileChildren(
  ApiUsersRouteChildren,
)

export interface FileRoutesByFullPath {
  '/api/users': typeof ApiUsersRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdRoute
}

export interface FileRoutesByTo {
  '/api/users': typeof ApiUsersRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/api/users': typeof ApiUsersRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/api/users' | '/api/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to: '/api/users' | '/api/users/$userId'
  id: '__root__' | '/api/users' | '/api/users/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ApiUsersRoute: typeof ApiUsersRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  ApiUsersRoute: ApiUsersRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/api/users"
      ]
    },
    "/api/users": {
      "filePath": "api/users.ts",
      "children": [
        "/api/users/$userId"
      ]
    },
    "/api/users/$userId": {
      "filePath": "api/users.$userId.ts",
      "parent": "/api/users"
    }
  }
}
ROUTE_MANIFEST_END */
