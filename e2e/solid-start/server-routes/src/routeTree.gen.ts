/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MergeServerFnMiddlewareContextRouteImport } from './routes/merge-server-fn-middleware-context'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiMiddlewareContextRouteImport } from './routes/api/middleware-context'

const MergeServerFnMiddlewareContextRoute =
  MergeServerFnMiddlewareContextRouteImport.update({
    id: '/merge-server-fn-middleware-context',
    path: '/merge-server-fn-middleware-context',
    getParentRoute: () => rootRouteImport,
  } as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiMiddlewareContextRoute = ApiMiddlewareContextRouteImport.update({
  id: '/api/middleware-context',
  path: '/api/middleware-context',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/merge-server-fn-middleware-context': typeof MergeServerFnMiddlewareContextRoute
  '/api/middleware-context': typeof ApiMiddlewareContextRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/merge-server-fn-middleware-context': typeof MergeServerFnMiddlewareContextRoute
  '/api/middleware-context': typeof ApiMiddlewareContextRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/merge-server-fn-middleware-context': typeof MergeServerFnMiddlewareContextRoute
  '/api/middleware-context': typeof ApiMiddlewareContextRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/merge-server-fn-middleware-context'
    | '/api/middleware-context'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/merge-server-fn-middleware-context' | '/api/middleware-context'
  id:
    | '__root__'
    | '/'
    | '/merge-server-fn-middleware-context'
    | '/api/middleware-context'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MergeServerFnMiddlewareContextRoute: typeof MergeServerFnMiddlewareContextRoute
  ApiMiddlewareContextRoute: typeof ApiMiddlewareContextRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/merge-server-fn-middleware-context': {
      id: '/merge-server-fn-middleware-context'
      path: '/merge-server-fn-middleware-context'
      fullPath: '/merge-server-fn-middleware-context'
      preLoaderRoute: typeof MergeServerFnMiddlewareContextRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/middleware-context': {
      id: '/api/middleware-context'
      path: '/api/middleware-context'
      fullPath: '/api/middleware-context'
      preLoaderRoute: typeof ApiMiddlewareContextRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MergeServerFnMiddlewareContextRoute: MergeServerFnMiddlewareContextRoute,
  ApiMiddlewareContextRoute: ApiMiddlewareContextRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/solid-start'
declare module '@tanstack/solid-start' {
  interface Register {
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
