/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as fooAsdfLayoutRouteImport } from './routes/(foo)/asdf/_layout'
import { Route as fooAsdfLayoutFooRouteImport } from './routes/(foo)/asdf/_layout.foo'
import { Route as fooAsdfbarIdRouteImport } from './routes/(foo)/asdf/(bar)/$id'
import { Route as fooAsdfanotherGroupLayoutRouteImport } from './routes/(foo)/asdf/(another-group)/_layout'
import { Route as fooAsdfbarLayoutAboutRouteImport } from './routes/(foo)/asdf/(bar)/_layout.about'
import { Route as fooAsdfanotherGroupLayoutBazRouteImport } from './routes/(foo)/asdf/(another-group)/_layout.baz'

const rootRouteImport = createRooRoute()
const fooAsdfRouteImport = createFileRoute('/(foo)/asdf')()
const fooAsdfanotherGroupRouteImport = createFileRoute(
  '/(foo)/asdf/(another-group)',
)()
const fooAsdfbarLayoutXyzLazyRouteImport = createFileRoute(
  '/(foo)/asdf/(bar)/_layout/xyz',
)()

const fooAsdfRoute = fooAsdfRouteImport.update({
  id: '/(foo)/asdf',
  path: '/asdf',
  getParentRoute: () => rootRouteImport,
} as any)
const fooAsdfanotherGroupRoute = fooAsdfanotherGroupRouteImport.update({
  id: '/(another-group)',
  getParentRoute: () => fooAsdfRoute,
} as any)
const fooAsdfLayoutRoute = fooAsdfLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => fooAsdfRoute,
} as any)
const fooAsdfLayoutFooRoute = fooAsdfLayoutFooRouteImport.update({
  id: '/foo',
  path: '/foo',
  getParentRoute: () => fooAsdfLayoutRoute,
} as any)
const fooAsdfbarIdRoute = fooAsdfbarIdRouteImport.update({
  id: '/(bar)/$id',
  path: '/$id',
  getParentRoute: () => fooAsdfRoute,
} as any)
const fooAsdfanotherGroupLayoutRoute =
  fooAsdfanotherGroupLayoutRouteImport.update({
    id: '/_layout',
    getParentRoute: () => fooAsdfanotherGroupRoute,
  } as any)
const fooAsdfbarLayoutXyzLazyRoute = fooAsdfbarLayoutXyzLazyRouteImport
  .update({
    id: '/(bar)/_layout/xyz',
    path: '/xyz',
    getParentRoute: () => fooAsdfRoute,
  } as any)
  .lazy(() =>
    import('./routes/(foo)/asdf/(bar)/_layout.xyz.lazy').then((d) => d.Route),
  )
const fooAsdfbarLayoutAboutRoute = fooAsdfbarLayoutAboutRouteImport.update({
  id: '/(bar)/_layout/about',
  path: '/about',
  getParentRoute: () => fooAsdfRoute,
} as any)
const fooAsdfanotherGroupLayoutBazRoute =
  fooAsdfanotherGroupLayoutBazRouteImport.update({
    id: '/baz',
    path: '/baz',
    getParentRoute: () => fooAsdfanotherGroupLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/asdf': typeof fooAsdfLayoutRouteWithChildren
  '/asdf/': typeof fooAsdfanotherGroupLayoutRouteWithChildren
  '/asdf/$id': typeof fooAsdfbarIdRoute
  '/asdf/foo': typeof fooAsdfLayoutFooRoute
  '/asdf/baz': typeof fooAsdfanotherGroupLayoutBazRoute
  '/asdf/about': typeof fooAsdfbarLayoutAboutRoute
  '/asdf/xyz': typeof fooAsdfbarLayoutXyzLazyRoute
}
export interface FileRoutesByTo {
  '/asdf': typeof fooAsdfanotherGroupLayoutRouteWithChildren
  '/asdf/$id': typeof fooAsdfbarIdRoute
  '/asdf/foo': typeof fooAsdfLayoutFooRoute
  '/asdf/baz': typeof fooAsdfanotherGroupLayoutBazRoute
  '/asdf/about': typeof fooAsdfbarLayoutAboutRoute
  '/asdf/xyz': typeof fooAsdfbarLayoutXyzLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(foo)/asdf': typeof fooAsdfRouteWithChildren
  '/(foo)/asdf/_layout': typeof fooAsdfLayoutRouteWithChildren
  '/(foo)/asdf/(another-group)': typeof fooAsdfanotherGroupRouteWithChildren
  '/(foo)/asdf/(another-group)/_layout': typeof fooAsdfanotherGroupLayoutRouteWithChildren
  '/(foo)/asdf/(bar)/$id': typeof fooAsdfbarIdRoute
  '/(foo)/asdf/_layout/foo': typeof fooAsdfLayoutFooRoute
  '/(foo)/asdf/(another-group)/_layout/baz': typeof fooAsdfanotherGroupLayoutBazRoute
  '/(foo)/asdf/(bar)/_layout/about': typeof fooAsdfbarLayoutAboutRoute
  '/(foo)/asdf/(bar)/_layout/xyz': typeof fooAsdfbarLayoutXyzLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/asdf'
    | '/asdf/'
    | '/asdf/$id'
    | '/asdf/foo'
    | '/asdf/baz'
    | '/asdf/about'
    | '/asdf/xyz'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/asdf'
    | '/asdf/$id'
    | '/asdf/foo'
    | '/asdf/baz'
    | '/asdf/about'
    | '/asdf/xyz'
  id:
    | '__root__'
    | '/(foo)/asdf'
    | '/(foo)/asdf/_layout'
    | '/(foo)/asdf/(another-group)'
    | '/(foo)/asdf/(another-group)/_layout'
    | '/(foo)/asdf/(bar)/$id'
    | '/(foo)/asdf/_layout/foo'
    | '/(foo)/asdf/(another-group)/_layout/baz'
    | '/(foo)/asdf/(bar)/_layout/about'
    | '/(foo)/asdf/(bar)/_layout/xyz'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  fooAsdfRoute: typeof fooAsdfRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(foo)/asdf/_layout': {
      id: '/(foo)/asdf/_layout'
      path: '/asdf'
      fullPath: '/asdf'
      preLoaderRoute: typeof fooAsdfLayoutRouteImport
      parentRoute: typeof fooAsdfRoute
    }
    '/(foo)/asdf/(another-group)/_layout': {
      id: '/(foo)/asdf/(another-group)/_layout'
      path: '/'
      fullPath: '/asdf/'
      preLoaderRoute: typeof fooAsdfanotherGroupLayoutRouteImport
      parentRoute: typeof fooAsdfanotherGroupRoute
    }
    '/(foo)/asdf/(bar)/$id': {
      id: '/(foo)/asdf/(bar)/$id'
      path: '/$id'
      fullPath: '/asdf/$id'
      preLoaderRoute: typeof fooAsdfbarIdRouteImport
      parentRoute: typeof fooAsdfRoute
    }
    '/(foo)/asdf/_layout/foo': {
      id: '/(foo)/asdf/_layout/foo'
      path: '/foo'
      fullPath: '/asdf/foo'
      preLoaderRoute: typeof fooAsdfLayoutFooRouteImport
      parentRoute: typeof fooAsdfLayoutRoute
    }
    '/(foo)/asdf/(another-group)/_layout/baz': {
      id: '/(foo)/asdf/(another-group)/_layout/baz'
      path: '/baz'
      fullPath: '/asdf/baz'
      preLoaderRoute: typeof fooAsdfanotherGroupLayoutBazRouteImport
      parentRoute: typeof fooAsdfanotherGroupLayoutRoute
    }
    '/(foo)/asdf/(bar)/_layout/about': {
      id: '/(foo)/asdf/(bar)/_layout/about'
      path: '/about'
      fullPath: '/asdf/about'
      preLoaderRoute: typeof fooAsdfbarLayoutAboutRouteImport
      parentRoute: typeof fooAsdfRoute
    }
    '/(foo)/asdf/(bar)/_layout/xyz': {
      id: '/(foo)/asdf/(bar)/_layout/xyz'
      path: '/xyz'
      fullPath: '/asdf/xyz'
      preLoaderRoute: typeof fooAsdfbarLayoutXyzLazyRouteImport
      parentRoute: typeof fooAsdfRoute
    }
  }
}

interface fooAsdfLayoutRouteChildren {
  fooAsdfLayoutFooRoute: typeof fooAsdfLayoutFooRoute
}

const fooAsdfLayoutRouteChildren: fooAsdfLayoutRouteChildren = {
  fooAsdfLayoutFooRoute: fooAsdfLayoutFooRoute,
}

const fooAsdfLayoutRouteWithChildren = fooAsdfLayoutRoute._addFileChildren(
  fooAsdfLayoutRouteChildren,
)

interface fooAsdfanotherGroupLayoutRouteChildren {
  fooAsdfanotherGroupLayoutBazRoute: typeof fooAsdfanotherGroupLayoutBazRoute
}

const fooAsdfanotherGroupLayoutRouteChildren: fooAsdfanotherGroupLayoutRouteChildren =
  {
    fooAsdfanotherGroupLayoutBazRoute: fooAsdfanotherGroupLayoutBazRoute,
  }

const fooAsdfanotherGroupLayoutRouteWithChildren =
  fooAsdfanotherGroupLayoutRoute._addFileChildren(
    fooAsdfanotherGroupLayoutRouteChildren,
  )

interface fooAsdfanotherGroupRouteChildren {
  fooAsdfanotherGroupLayoutRoute: typeof fooAsdfanotherGroupLayoutRouteWithChildren
}

const fooAsdfanotherGroupRouteChildren: fooAsdfanotherGroupRouteChildren = {
  fooAsdfanotherGroupLayoutRoute: fooAsdfanotherGroupLayoutRouteWithChildren,
}

const fooAsdfanotherGroupRouteWithChildren =
  fooAsdfanotherGroupRoute._addFileChildren(fooAsdfanotherGroupRouteChildren)

interface fooAsdfRouteChildren {
  fooAsdfLayoutRoute: typeof fooAsdfLayoutRouteWithChildren
  fooAsdfanotherGroupRoute: typeof fooAsdfanotherGroupRouteWithChildren
  fooAsdfbarIdRoute: typeof fooAsdfbarIdRoute
  fooAsdfbarLayoutAboutRoute: typeof fooAsdfbarLayoutAboutRoute
  fooAsdfbarLayoutXyzLazyRoute: typeof fooAsdfbarLayoutXyzLazyRoute
}

const fooAsdfRouteChildren: fooAsdfRouteChildren = {
  fooAsdfLayoutRoute: fooAsdfLayoutRouteWithChildren,
  fooAsdfanotherGroupRoute: fooAsdfanotherGroupRouteWithChildren,
  fooAsdfbarIdRoute: fooAsdfbarIdRoute,
  fooAsdfbarLayoutAboutRoute: fooAsdfbarLayoutAboutRoute,
  fooAsdfbarLayoutXyzLazyRoute: fooAsdfbarLayoutXyzLazyRoute,
}

const fooAsdfRouteWithChildren =
  fooAsdfRoute._addFileChildren(fooAsdfRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  fooAsdfRoute: fooAsdfRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
