/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as groupCLayoutCRouteImport } from './routes/(group-c)/_layout-c'
import { Route as groupBLayoutBRouteImport } from './routes/(group-b)/_layout-b'
import { Route as groupALayoutARouteImport } from './routes/(group-a)/_layout-a'
import { Route as groupCLayoutCIndexRouteImport } from './routes/(group-c)/_layout-c/index'
import { Route as groupBLayoutBDashboardRouteImport } from './routes/(group-b)/_layout-b/dashboard'
import { Route as groupALayoutASignupRouteImport } from './routes/(group-a)/_layout-a/signup'
import { Route as groupALayoutALoginRouteImport } from './routes/(group-a)/_layout-a/login'

const groupCLayoutCRoute = groupCLayoutCRouteImport.update({
  id: '/(group-c)/_layout-c',
  getParentRoute: () => rootRouteImport,
} as any)
const groupBLayoutBRoute = groupBLayoutBRouteImport.update({
  id: '/(group-b)/_layout-b',
  getParentRoute: () => rootRouteImport,
} as any)
const groupALayoutARoute = groupALayoutARouteImport.update({
  id: '/(group-a)/_layout-a',
  getParentRoute: () => rootRouteImport,
} as any)
const groupCLayoutCIndexRoute = groupCLayoutCIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => groupCLayoutCRoute,
} as any)
const groupBLayoutBDashboardRoute = groupBLayoutBDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => groupBLayoutBRoute,
} as any)
const groupALayoutASignupRoute = groupALayoutASignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => groupALayoutARoute,
} as any)
const groupALayoutALoginRoute = groupALayoutALoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => groupALayoutARoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof groupALayoutALoginRoute
  '/signup': typeof groupALayoutASignupRoute
  '/dashboard': typeof groupBLayoutBDashboardRoute
  '/': typeof groupCLayoutCIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof groupALayoutALoginRoute
  '/signup': typeof groupALayoutASignupRoute
  '/dashboard': typeof groupBLayoutBDashboardRoute
  '/': typeof groupCLayoutCIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(group-a)/_layout-a': typeof groupALayoutARouteWithChildren
  '/(group-b)/_layout-b': typeof groupBLayoutBRouteWithChildren
  '/(group-c)/_layout-c': typeof groupCLayoutCRouteWithChildren
  '/(group-a)/_layout-a/login': typeof groupALayoutALoginRoute
  '/(group-a)/_layout-a/signup': typeof groupALayoutASignupRoute
  '/(group-b)/_layout-b/dashboard': typeof groupBLayoutBDashboardRoute
  '/(group-c)/_layout-c/': typeof groupCLayoutCIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/signup' | '/dashboard' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/signup' | '/dashboard' | '/'
  id:
    | '__root__'
    | '/(group-a)/_layout-a'
    | '/(group-b)/_layout-b'
    | '/(group-c)/_layout-c'
    | '/(group-a)/_layout-a/login'
    | '/(group-a)/_layout-a/signup'
    | '/(group-b)/_layout-b/dashboard'
    | '/(group-c)/_layout-c/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  groupALayoutARoute: typeof groupALayoutARouteWithChildren
  groupBLayoutBRoute: typeof groupBLayoutBRouteWithChildren
  groupCLayoutCRoute: typeof groupCLayoutCRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(group-c)/_layout-c': {
      id: '/(group-c)/_layout-c'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof groupCLayoutCRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(group-b)/_layout-b': {
      id: '/(group-b)/_layout-b'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof groupBLayoutBRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(group-a)/_layout-a': {
      id: '/(group-a)/_layout-a'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof groupALayoutARouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(group-c)/_layout-c/': {
      id: '/(group-c)/_layout-c/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof groupCLayoutCIndexRouteImport
      parentRoute: typeof groupCLayoutCRoute
    }
    '/(group-b)/_layout-b/dashboard': {
      id: '/(group-b)/_layout-b/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof groupBLayoutBDashboardRouteImport
      parentRoute: typeof groupBLayoutBRoute
    }
    '/(group-a)/_layout-a/signup': {
      id: '/(group-a)/_layout-a/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof groupALayoutASignupRouteImport
      parentRoute: typeof groupALayoutARoute
    }
    '/(group-a)/_layout-a/login': {
      id: '/(group-a)/_layout-a/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof groupALayoutALoginRouteImport
      parentRoute: typeof groupALayoutARoute
    }
  }
}

interface groupALayoutARouteChildren {
  groupALayoutALoginRoute: typeof groupALayoutALoginRoute
  groupALayoutASignupRoute: typeof groupALayoutASignupRoute
}

const groupALayoutARouteChildren: groupALayoutARouteChildren = {
  groupALayoutALoginRoute: groupALayoutALoginRoute,
  groupALayoutASignupRoute: groupALayoutASignupRoute,
}

const groupALayoutARouteWithChildren = groupALayoutARoute._addFileChildren(
  groupALayoutARouteChildren,
)

interface groupBLayoutBRouteChildren {
  groupBLayoutBDashboardRoute: typeof groupBLayoutBDashboardRoute
}

const groupBLayoutBRouteChildren: groupBLayoutBRouteChildren = {
  groupBLayoutBDashboardRoute: groupBLayoutBDashboardRoute,
}

const groupBLayoutBRouteWithChildren = groupBLayoutBRoute._addFileChildren(
  groupBLayoutBRouteChildren,
)

interface groupCLayoutCRouteChildren {
  groupCLayoutCIndexRoute: typeof groupCLayoutCIndexRoute
}

const groupCLayoutCRouteChildren: groupCLayoutCRouteChildren = {
  groupCLayoutCIndexRoute: groupCLayoutCIndexRoute,
}

const groupCLayoutCRouteWithChildren = groupCLayoutCRoute._addFileChildren(
  groupCLayoutCRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  groupALayoutARoute: groupALayoutARouteWithChildren,
  groupBLayoutBRoute: groupBLayoutBRouteWithChildren,
  groupCLayoutCRoute: groupCLayoutCRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
