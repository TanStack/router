/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiBarRouteImport } from './routes/api/bar'

const rootRouteImport = createRooRoute()
const FooLazyRouteImport = createFileRoute('/foo')()

const FooLazyRoute = FooLazyRouteImport.update({
  id: '/foo',
  path: '/foo',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/foo.lazy').then((d) => d.Route))
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiBarRoute = ApiBarRouteImport.update({
  id: '/api/bar',
  path: '/api/bar',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/foo': typeof FooLazyRoute
  '/api/bar': typeof ApiBarRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/foo': typeof FooLazyRoute
  '/api/bar': typeof ApiBarRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/foo': typeof FooLazyRoute
  '/api/bar': typeof ApiBarRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/foo' | '/api/bar'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/foo' | '/api/bar'
  id: '__root__' | '/' | '/foo' | '/api/bar'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FooLazyRoute: typeof FooLazyRoute
  ApiBarRoute: typeof ApiBarRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/foo': {
      id: '/foo'
      path: '/foo'
      fullPath: '/foo'
      preLoaderRoute: typeof FooLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/bar': {
      id: '/api/bar'
      path: '/api/bar'
      fullPath: '/api/bar'
      preLoaderRoute: typeof ApiBarRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FooLazyRoute: FooLazyRoute,
  ApiBarRoute: ApiBarRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
