/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PostsRouteRouteImport } from './routes/posts.route'
import { Route as BlogRouteRouteImport } from './routes/blog.route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PostsIndexRouteImport } from './routes/posts.index'
import { Route as BlogIndexRouteImport } from './routes/blog.index'
import { Route as BlogStatsRouteImport } from './routes/blog_.stats'
import { Route as PostsPostIdIndexRouteImport } from './routes/posts.$postId.index'
import { Route as BlogSlugIndexRouteImport } from './routes/blog.$slug.index'
import { Route as PostsPostIdDeepRouteImport } from './routes/posts.$postId.deep'

// Create/Update Routes

const PostsRouteRoute = PostsRouteRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const BlogRouteRoute = BlogRouteRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRouteRoute,
} as any)

const BlogIndexRoute = BlogIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BlogRouteRoute,
} as any)

const BlogStatsRoute = BlogStatsRouteImport.update({
  id: '/blog_/stats',
  path: '/blog/stats',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdIndexRoute = PostsPostIdIndexRouteImport.update({
  id: '/$postId/',
  path: '/$postId/',
  getParentRoute: () => PostsRouteRoute,
} as any)

const BlogSlugIndexRoute = BlogSlugIndexRouteImport.update({
  id: '/$slug/',
  path: '/$slug/',
  getParentRoute: () => BlogRouteRoute,
} as any)

const PostsPostIdDeepRoute = PostsPostIdDeepRouteImport.update({
  id: '/$postId/deep',
  path: '/$postId/deep',
  getParentRoute: () => PostsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogRouteRouteImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteRouteImport
      parentRoute: typeof rootRoute
    }
    '/blog_/stats': {
      id: '/blog_/stats'
      path: '/blog/stats'
      fullPath: '/blog/stats'
      preLoaderRoute: typeof BlogStatsRouteImport
      parentRoute: typeof rootRoute
    }
    '/blog/': {
      id: '/blog/'
      path: '/'
      fullPath: '/blog/'
      preLoaderRoute: typeof BlogIndexRouteImport
      parentRoute: typeof BlogRouteRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof PostsRouteRouteImport
    }
    '/posts/$postId/deep': {
      id: '/posts/$postId/deep'
      path: '/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepRouteImport
      parentRoute: typeof PostsRouteRouteImport
    }
    '/blog/$slug/': {
      id: '/blog/$slug/'
      path: '/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogSlugIndexRouteImport
      parentRoute: typeof BlogRouteRouteImport
    }
    '/posts/$postId/': {
      id: '/posts/$postId/'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdIndexRouteImport
      parentRoute: typeof PostsRouteRouteImport
    }
  }
}

// Add type-safety to the createFileRoute function across the route tree

declare module './routes/index' {
  const createFileRoute: CreateFileRoute<
    '/',
    FileRoutesByPath['/']['parentRoute'],
    FileRoutesByPath['/']['id'],
    FileRoutesByPath['/']['path'],
    FileRoutesByPath['/']['fullPath']
  >
}
declare module './routes/blog.route' {
  const createFileRoute: CreateFileRoute<
    '/blog',
    FileRoutesByPath['/blog']['parentRoute'],
    FileRoutesByPath['/blog']['id'],
    FileRoutesByPath['/blog']['path'],
    FileRoutesByPath['/blog']['fullPath']
  >
}
declare module './routes/posts.route' {
  const createFileRoute: CreateFileRoute<
    '/posts',
    FileRoutesByPath['/posts']['parentRoute'],
    FileRoutesByPath['/posts']['id'],
    FileRoutesByPath['/posts']['path'],
    FileRoutesByPath['/posts']['fullPath']
  >
}
declare module './routes/blog_.stats' {
  const createFileRoute: CreateFileRoute<
    '/blog_/stats',
    FileRoutesByPath['/blog_/stats']['parentRoute'],
    FileRoutesByPath['/blog_/stats']['id'],
    FileRoutesByPath['/blog_/stats']['path'],
    FileRoutesByPath['/blog_/stats']['fullPath']
  >
}
declare module './routes/blog.index' {
  const createFileRoute: CreateFileRoute<
    '/blog/',
    FileRoutesByPath['/blog/']['parentRoute'],
    FileRoutesByPath['/blog/']['id'],
    FileRoutesByPath['/blog/']['path'],
    FileRoutesByPath['/blog/']['fullPath']
  >
}
declare module './routes/posts.index' {
  const createFileRoute: CreateFileRoute<
    '/posts/',
    FileRoutesByPath['/posts/']['parentRoute'],
    FileRoutesByPath['/posts/']['id'],
    FileRoutesByPath['/posts/']['path'],
    FileRoutesByPath['/posts/']['fullPath']
  >
}
declare module './routes/posts.$postId.deep' {
  const createFileRoute: CreateFileRoute<
    '/posts/$postId/deep',
    FileRoutesByPath['/posts/$postId/deep']['parentRoute'],
    FileRoutesByPath['/posts/$postId/deep']['id'],
    FileRoutesByPath['/posts/$postId/deep']['path'],
    FileRoutesByPath['/posts/$postId/deep']['fullPath']
  >
}
declare module './routes/blog.$slug.index' {
  const createFileRoute: CreateFileRoute<
    '/blog/$slug/',
    FileRoutesByPath['/blog/$slug/']['parentRoute'],
    FileRoutesByPath['/blog/$slug/']['id'],
    FileRoutesByPath['/blog/$slug/']['path'],
    FileRoutesByPath['/blog/$slug/']['fullPath']
  >
}
declare module './routes/posts.$postId.index' {
  const createFileRoute: CreateFileRoute<
    '/posts/$postId/',
    FileRoutesByPath['/posts/$postId/']['parentRoute'],
    FileRoutesByPath['/posts/$postId/']['id'],
    FileRoutesByPath['/posts/$postId/']['path'],
    FileRoutesByPath['/posts/$postId/']['fullPath']
  >
}

// Create and export the route tree

interface BlogRouteRouteChildren {
  BlogIndexRoute: typeof BlogIndexRoute
  BlogSlugIndexRoute: typeof BlogSlugIndexRoute
}

const BlogRouteRouteChildren: BlogRouteRouteChildren = {
  BlogIndexRoute: BlogIndexRoute,
  BlogSlugIndexRoute: BlogSlugIndexRoute,
}

const BlogRouteRouteWithChildren = BlogRouteRoute._addFileChildren(
  BlogRouteRouteChildren,
)

interface PostsRouteRouteChildren {
  PostsIndexRoute: typeof PostsIndexRoute
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
  PostsPostIdIndexRoute: typeof PostsPostIdIndexRoute
}

const PostsRouteRouteChildren: PostsRouteRouteChildren = {
  PostsIndexRoute: PostsIndexRoute,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
  PostsPostIdIndexRoute: PostsPostIdIndexRoute,
}

const PostsRouteRouteWithChildren = PostsRouteRoute._addFileChildren(
  PostsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blog': typeof BlogRouteRouteWithChildren
  '/posts': typeof PostsRouteRouteWithChildren
  '/blog/stats': typeof BlogStatsRoute
  '/blog/': typeof BlogIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/blog/$slug': typeof BlogSlugIndexRoute
  '/posts/$postId': typeof PostsPostIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blog/stats': typeof BlogStatsRoute
  '/blog': typeof BlogIndexRoute
  '/posts': typeof PostsIndexRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/blog/$slug': typeof BlogSlugIndexRoute
  '/posts/$postId': typeof PostsPostIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/blog': typeof BlogRouteRouteWithChildren
  '/posts': typeof PostsRouteRouteWithChildren
  '/blog_/stats': typeof BlogStatsRoute
  '/blog/': typeof BlogIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/blog/$slug/': typeof BlogSlugIndexRoute
  '/posts/$postId/': typeof PostsPostIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blog'
    | '/posts'
    | '/blog/stats'
    | '/blog/'
    | '/posts/'
    | '/posts/$postId/deep'
    | '/blog/$slug'
    | '/posts/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/blog/stats'
    | '/blog'
    | '/posts'
    | '/posts/$postId/deep'
    | '/blog/$slug'
    | '/posts/$postId'
  id:
    | '__root__'
    | '/'
    | '/blog'
    | '/posts'
    | '/blog_/stats'
    | '/blog/'
    | '/posts/'
    | '/posts/$postId/deep'
    | '/blog/$slug/'
    | '/posts/$postId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlogRouteRoute: typeof BlogRouteRouteWithChildren
  PostsRouteRoute: typeof PostsRouteRouteWithChildren
  BlogStatsRoute: typeof BlogStatsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlogRouteRoute: BlogRouteRouteWithChildren,
  PostsRouteRoute: PostsRouteRouteWithChildren,
  BlogStatsRoute: BlogStatsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/blog",
        "/posts",
        "/blog_/stats"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/blog": {
      "filePath": "blog.route.tsx",
      "children": [
        "/blog/",
        "/blog/$slug/"
      ]
    },
    "/posts": {
      "filePath": "posts.route.tsx",
      "children": [
        "/posts/",
        "/posts/$postId/deep",
        "/posts/$postId/"
      ]
    },
    "/blog_/stats": {
      "filePath": "blog_.stats.tsx"
    },
    "/blog/": {
      "filePath": "blog.index.tsx",
      "parent": "/blog"
    },
    "/posts/": {
      "filePath": "posts.index.tsx",
      "parent": "/posts"
    },
    "/posts/$postId/deep": {
      "filePath": "posts.$postId.deep.tsx",
      "parent": "/posts"
    },
    "/blog/$slug/": {
      "filePath": "blog.$slug.index.tsx",
      "parent": "/blog"
    },
    "/posts/$postId/": {
      "filePath": "posts.$postId.index.tsx",
      "parent": "/posts"
    }
  }
}
ROUTE_MANIFEST_END */
