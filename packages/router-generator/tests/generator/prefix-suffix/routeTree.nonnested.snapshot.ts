/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WildcardChar123Char125suffixRouteImport } from './routes/wildcard/{$}suffix'
import { Route as WildcardChar123Char125DotsuffixRouteImport } from './routes/wildcard/{$}[.]suffix'
import { Route as WildcardPrefixChar123Char125RouteImport } from './routes/wildcard/prefix{$}'
import { Route as WildcardSplatRouteImport } from './routes/wildcard/$'

const WildcardChar123Char125suffixRoute =
  WildcardChar123Char125suffixRouteImport.update({
    id: '/wildcard/{$}suffix',
    path: '/wildcard/{$}suffix',
    getParentRoute: () => rootRouteImport,
  } as any)
const WildcardChar123Char125DotsuffixRoute =
  WildcardChar123Char125DotsuffixRouteImport.update({
    id: '/wildcard/{$}.suffix',
    path: '/wildcard/{$}.suffix',
    getParentRoute: () => rootRouteImport,
  } as any)
const WildcardPrefixChar123Char125Route =
  WildcardPrefixChar123Char125RouteImport.update({
    id: '/wildcard/prefix{$}',
    path: '/wildcard/prefix{$}',
    getParentRoute: () => rootRouteImport,
  } as any)
const WildcardSplatRoute = WildcardSplatRouteImport.update({
  id: '/wildcard/$',
  path: '/wildcard/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/wildcard/$': typeof WildcardSplatRoute
  '/wildcard/prefix{$}': typeof WildcardPrefixChar123Char125Route
  '/wildcard/{$}.suffix': typeof WildcardChar123Char125DotsuffixRoute
  '/wildcard/{$}suffix': typeof WildcardChar123Char125suffixRoute
}
export interface FileRoutesByTo {
  '/wildcard/$': typeof WildcardSplatRoute
  '/wildcard/prefix{$}': typeof WildcardPrefixChar123Char125Route
  '/wildcard/{$}.suffix': typeof WildcardChar123Char125DotsuffixRoute
  '/wildcard/{$}suffix': typeof WildcardChar123Char125suffixRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/wildcard/$': typeof WildcardSplatRoute
  '/wildcard/prefix{$}': typeof WildcardPrefixChar123Char125Route
  '/wildcard/{$}.suffix': typeof WildcardChar123Char125DotsuffixRoute
  '/wildcard/{$}suffix': typeof WildcardChar123Char125suffixRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/wildcard/$'
    | '/wildcard/prefix{$}'
    | '/wildcard/{$}.suffix'
    | '/wildcard/{$}suffix'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/wildcard/$'
    | '/wildcard/prefix{$}'
    | '/wildcard/{$}.suffix'
    | '/wildcard/{$}suffix'
  id:
    | '__root__'
    | '/wildcard/$'
    | '/wildcard/prefix{$}'
    | '/wildcard/{$}.suffix'
    | '/wildcard/{$}suffix'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  WildcardSplatRoute: typeof WildcardSplatRoute
  WildcardPrefixChar123Char125Route: typeof WildcardPrefixChar123Char125Route
  WildcardChar123Char125DotsuffixRoute: typeof WildcardChar123Char125DotsuffixRoute
  WildcardChar123Char125suffixRoute: typeof WildcardChar123Char125suffixRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/wildcard/{$}suffix': {
      id: '/wildcard/{$}suffix'
      path: '/wildcard/{$}suffix'
      fullPath: '/wildcard/{$}suffix'
      preLoaderRoute: typeof WildcardChar123Char125suffixRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/wildcard/{$}.suffix': {
      id: '/wildcard/{$}.suffix'
      path: '/wildcard/{$}.suffix'
      fullPath: '/wildcard/{$}.suffix'
      preLoaderRoute: typeof WildcardChar123Char125DotsuffixRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/wildcard/prefix{$}': {
      id: '/wildcard/prefix{$}'
      path: '/wildcard/prefix{$}'
      fullPath: '/wildcard/prefix{$}'
      preLoaderRoute: typeof WildcardPrefixChar123Char125RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/wildcard/$': {
      id: '/wildcard/$'
      path: '/wildcard/$'
      fullPath: '/wildcard/$'
      preLoaderRoute: typeof WildcardSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  WildcardSplatRoute: WildcardSplatRoute,
  WildcardPrefixChar123Char125Route: WildcardPrefixChar123Char125Route,
  WildcardChar123Char125DotsuffixRoute: WildcardChar123Char125DotsuffixRoute,
  WildcardChar123Char125suffixRoute: WildcardChar123Char125suffixRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
