/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PostsR0ut3RouteImport } from './routes/posts/_r0ut3_'
import { Route as BlogR0ut3RouteImport } from './routes/blog/_r0ut3_'
import { Route as R1nd3xRouteImport } from './routes/_1nd3x'
import { Route as Posts1nd3xRouteImport } from './routes/posts/_1nd3x'
import { Route as Blog1nd3xRouteImport } from './routes/blog/_1nd3x'
import { Route as BlogSlugRouteImport } from './routes/blog/$slug'
import { Route as PostsPostId1nd3xRouteImport } from './routes/posts/$postId/_1nd3x'
import { Route as PostsPostIdDeepRouteImport } from './routes/posts/$postId/deep'

const PostsR0ut3Route = PostsR0ut3RouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogR0ut3Route = BlogR0ut3RouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRouteImport,
} as any)
const R1nd3xRoute = R1nd3xRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const Posts1nd3xRoute = Posts1nd3xRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsR0ut3Route,
} as any)
const Blog1nd3xRoute = Blog1nd3xRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BlogR0ut3Route,
} as any)
const BlogSlugRoute = BlogSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => BlogR0ut3Route,
} as any)
const PostsPostId1nd3xRoute = PostsPostId1nd3xRouteImport.update({
  id: '/$postId/',
  path: '/$postId/',
  getParentRoute: () => PostsR0ut3Route,
} as any)
const PostsPostIdDeepRoute = PostsPostIdDeepRouteImport.update({
  id: '/$postId/deep',
  path: '/$postId/deep',
  getParentRoute: () => PostsR0ut3Route,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof R1nd3xRoute
  '/blog': typeof BlogR0ut3RouteWithChildren
  '/posts': typeof PostsR0ut3RouteWithChildren
  '/blog/$slug': typeof BlogSlugRoute
  '/blog/': typeof Blog1nd3xRoute
  '/posts/': typeof Posts1nd3xRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/posts/$postId': typeof PostsPostId1nd3xRoute
}
export interface FileRoutesByTo {
  '/': typeof R1nd3xRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/blog': typeof Blog1nd3xRoute
  '/posts': typeof Posts1nd3xRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/posts/$postId': typeof PostsPostId1nd3xRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof R1nd3xRoute
  '/blog': typeof BlogR0ut3RouteWithChildren
  '/posts': typeof PostsR0ut3RouteWithChildren
  '/blog/$slug': typeof BlogSlugRoute
  '/blog/': typeof Blog1nd3xRoute
  '/posts/': typeof Posts1nd3xRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/posts/$postId/': typeof PostsPostId1nd3xRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blog'
    | '/posts'
    | '/blog/$slug'
    | '/blog/'
    | '/posts/'
    | '/posts/$postId/deep'
    | '/posts/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/blog/$slug'
    | '/blog'
    | '/posts'
    | '/posts/$postId/deep'
    | '/posts/$postId'
  id:
    | '__root__'
    | '/'
    | '/blog'
    | '/posts'
    | '/blog/$slug'
    | '/blog/'
    | '/posts/'
    | '/posts/$postId/deep'
    | '/posts/$postId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  R1nd3xRoute: typeof R1nd3xRoute
  BlogR0ut3Route: typeof BlogR0ut3RouteWithChildren
  PostsR0ut3Route: typeof PostsR0ut3RouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsR0ut3RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogR0ut3RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof R1nd3xRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof Posts1nd3xRouteImport
      parentRoute: typeof PostsR0ut3Route
    }
    '/blog/': {
      id: '/blog/'
      path: '/'
      fullPath: '/blog/'
      preLoaderRoute: typeof Blog1nd3xRouteImport
      parentRoute: typeof BlogR0ut3Route
    }
    '/blog/$slug': {
      id: '/blog/$slug'
      path: '/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogSlugRouteImport
      parentRoute: typeof BlogR0ut3Route
    }
    '/posts/$postId/': {
      id: '/posts/$postId/'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostId1nd3xRouteImport
      parentRoute: typeof PostsR0ut3Route
    }
    '/posts/$postId/deep': {
      id: '/posts/$postId/deep'
      path: '/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepRouteImport
      parentRoute: typeof PostsR0ut3Route
    }
  }
}

interface BlogR0ut3RouteChildren {
  BlogSlugRoute: typeof BlogSlugRoute
  Blog1nd3xRoute: typeof Blog1nd3xRoute
}

const BlogR0ut3RouteChildren: BlogR0ut3RouteChildren = {
  BlogSlugRoute: BlogSlugRoute,
  Blog1nd3xRoute: Blog1nd3xRoute,
}

const BlogR0ut3RouteWithChildren = BlogR0ut3Route._addFileChildren(
  BlogR0ut3RouteChildren,
)

interface PostsR0ut3RouteChildren {
  Posts1nd3xRoute: typeof Posts1nd3xRoute
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
  PostsPostId1nd3xRoute: typeof PostsPostId1nd3xRoute
}

const PostsR0ut3RouteChildren: PostsR0ut3RouteChildren = {
  Posts1nd3xRoute: Posts1nd3xRoute,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
  PostsPostId1nd3xRoute: PostsPostId1nd3xRoute,
}

const PostsR0ut3RouteWithChildren = PostsR0ut3Route._addFileChildren(
  PostsR0ut3RouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  R1nd3xRoute: R1nd3xRoute,
  BlogR0ut3Route: BlogR0ut3RouteWithChildren,
  PostsR0ut3Route: PostsR0ut3RouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
